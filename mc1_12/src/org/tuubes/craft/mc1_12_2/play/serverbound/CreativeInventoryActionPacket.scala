package org.tuubes.craft.mc1_12_2.play.serverbound

import CreativeInventoryActionPacketBuilder._
import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.craft.CraftAttach
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class CreativeInventoryActionPacket(var slot: Short, var clickedItem: AnyRef) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putShort(slot)
    // TODO write clickedItem
  }
	
  override def id = CreativeInventoryActionPacket.id

	
}
object CreativeInventoryActionPacket extends PacketObj[CraftAttach, CreativeInventoryActionPacket] {
  override val id = 27
	
  override def read(in: NiolInput): CreativeInventoryActionPacket = {
    val slot = in.getShort()
    // TODO read clickedItem
    new CreativeInventoryActionPacket(slot, null)
  }
}
/** Packet builder auto-generated by DataTractor */
final class CreativeInventoryActionPacketBuilder[P <: CreativeInventoryActionPacket] extends PacketBuilder[CreativeInventoryActionPacket, P =:= Complete] {
  private[this] var slot: Short = _
  private[this] var clickedItem: AnyRef = _

  def withSlot(slot: Short): CreativeInventoryActionPacketBuilder[P with Slot] = {
    this.slot = slot
    this.asInstanceOf[CreativeInventoryActionPacketBuilder[P with Slot]]
  }

  def withClickedItem(clickedItem: AnyRef): CreativeInventoryActionPacketBuilder[P with ClickedItem] = {
    this.clickedItem = clickedItem
    this.asInstanceOf[CreativeInventoryActionPacketBuilder[P with ClickedItem]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new CreativeInventoryActionPacket(slot, clickedItem)
  }
}
object CreativeInventoryActionPacketBuilder {
  sealed trait Slot
  sealed trait ClickedItem
  type Complete = CreativeInventoryActionPacket with Slot with ClickedItem
}
