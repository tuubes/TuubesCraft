package org.tuubes.craft.mc1_12_2.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import CameraPacketBuilder._
import org.tuubes.craft.CraftAttach
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class CameraPacket(var cameraId: Int) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(cameraId)
  }
	
  override def id = CameraPacket.id

	
}
object CameraPacket extends PacketObj[CraftAttach, CameraPacket] {
  override val id = 57
	
  override def read(in: NiolInput): CameraPacket = {
    val cameraId = in.getVarint()
    new CameraPacket(cameraId)
  }
}
/** Packet builder auto-generated by DataTractor */
final class CameraPacketBuilder[P <: CameraPacket] extends PacketBuilder[CameraPacket, P =:= Complete] {
  private[this] var cameraId: Int = _

  def withCameraId(cameraId: Int): CameraPacketBuilder[P with CameraId] = {
    this.cameraId = cameraId
    this.asInstanceOf[CameraPacketBuilder[P with CameraId]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new CameraPacket(cameraId)
  }
}
object CameraPacketBuilder {
  sealed trait CameraId
  type Complete = CameraPacket with CameraId
}
