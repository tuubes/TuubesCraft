package org.tuubes.craft.mc1_12_2.login.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import java.nio.charset.StandardCharsets.UTF_8
import EncryptionRequestPacketBuilder._
import org.tuubes.craft.CraftAttach
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class EncryptionRequestPacket(var serverId: String, var publicKey: Array[Byte], var verifyToken: Array[Byte]) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putVarstring(serverId, UTF_8)
    out.putVarint(publicKey.length)
    out.putBytes(publicKey)
    out.putVarint(verifyToken.length)
    out.putBytes(verifyToken)
  }
	
  override def id = EncryptionRequestPacket.id

	
}
object EncryptionRequestPacket extends PacketObj[CraftAttach, EncryptionRequestPacket] {
  override val id = 1
	
  override def read(in: NiolInput): EncryptionRequestPacket = {
    val serverId = in.getVarstring(UTF_8)
    val publicKeyLength = in.getVarint()
    val publicKey = in.getBytes(publicKeyLength)
    val verifyTokenLength = in.getVarint()
    val verifyToken = in.getBytes(verifyTokenLength)
    new EncryptionRequestPacket(serverId, publicKey, verifyToken)
  }
}
/** Packet builder auto-generated by DataTractor */
final class EncryptionRequestPacketBuilder[P <: EncryptionRequestPacket] extends PacketBuilder[EncryptionRequestPacket, P =:= Complete] {
  private[this] var serverId: String = _
  private[this] var publicKey: Array[Byte] = _
  private[this] var verifyToken: Array[Byte] = _

  def withServerId(serverId: String): EncryptionRequestPacketBuilder[P with ServerId] = {
    this.serverId = serverId
    this.asInstanceOf[EncryptionRequestPacketBuilder[P with ServerId]]
  }

  def withPublicKey(publicKey: Array[Byte]): EncryptionRequestPacketBuilder[P with PublicKey] = {
    this.publicKey = publicKey
    this.asInstanceOf[EncryptionRequestPacketBuilder[P with PublicKey]]
  }

  def withVerifyToken(verifyToken: Array[Byte]): EncryptionRequestPacketBuilder[P with VerifyToken] = {
    this.verifyToken = verifyToken
    this.asInstanceOf[EncryptionRequestPacketBuilder[P with VerifyToken]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new EncryptionRequestPacket(serverId, publicKey, verifyToken)
  }
}
object EncryptionRequestPacketBuilder {
  sealed trait ServerId
  sealed trait PublicKey
  sealed trait VerifyToken
  type Complete = EncryptionRequestPacket with ServerId with PublicKey with VerifyToken
}
