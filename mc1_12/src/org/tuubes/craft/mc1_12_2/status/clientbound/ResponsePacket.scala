package org.tuubes.craft.mc1_12_2.status.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import java.nio.charset.StandardCharsets.UTF_8
import ResponsePacketBuilder._
import org.tuubes.craft.CraftAttach
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class ResponsePacket(var jsonResponse: String) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putVarstring(jsonResponse, UTF_8)
  }
	
  override def id = ResponsePacket.id

	
}
object ResponsePacket extends PacketObj[CraftAttach, ResponsePacket] {
  override val id = 0
	
  override def read(in: NiolInput): ResponsePacket = {
    val jsonResponse = in.getVarstring(UTF_8)
    new ResponsePacket(jsonResponse)
  }
}
/** Packet builder auto-generated by DataTractor */
final class ResponsePacketBuilder[P <: ResponsePacket] extends PacketBuilder[ResponsePacket, P =:= Complete] {
  private[this] var jsonResponse: String = _

  def withJsonResponse(jsonResponse: String): ResponsePacketBuilder[P with JsonResponse] = {
    this.jsonResponse = jsonResponse
    this.asInstanceOf[ResponsePacketBuilder[P with JsonResponse]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new ResponsePacket(jsonResponse)
  }
}
object ResponsePacketBuilder {
  sealed trait JsonResponse
  type Complete = ResponsePacket with JsonResponse
}
