package org.tuubes.craft.mc1_12.play.serverbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.core.network._
import org.tuubes.craft.CraftAttach
import EntityActionPacketBuilder._

/** Packet class auto-generated by DataTractor */
final class EntityActionPacket(var entityId: Int, var actionId: Int, var jumpBoost: Int) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(entityId)
    out.putVarint(actionId)
    out.putVarint(jumpBoost)
  }
	
  override def obj = EntityActionPacket

	
}
object EntityActionPacket extends PacketObj[CraftAttach, EntityActionPacket] {
  override val id = 21
	
  override def read(in: NiolInput): EntityActionPacket = {
    val entityId = in.getVarint()
    val actionId = in.getVarint()
    val jumpBoost = in.getVarint()
    new EntityActionPacket(entityId, actionId, jumpBoost)
  }
}
/** Packet builder auto-generated by DataTractor */
final class EntityActionPacketBuilder[P <: EntityActionPacket] extends PacketBuilder[EntityActionPacket, P =:= Complete] {
  private[this] var entityId: Int = _
  private[this] var actionId: Int = _
  private[this] var jumpBoost: Int = _

  def withEntityId(entityId: Int): EntityActionPacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[EntityActionPacketBuilder[P with EntityId]]
  }

  def withActionId(actionId: Int): EntityActionPacketBuilder[P with ActionId] = {
    this.actionId = actionId
    this.asInstanceOf[EntityActionPacketBuilder[P with ActionId]]
  }

  def withJumpBoost(jumpBoost: Int): EntityActionPacketBuilder[P with JumpBoost] = {
    this.jumpBoost = jumpBoost
    this.asInstanceOf[EntityActionPacketBuilder[P with JumpBoost]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new EntityActionPacket(entityId, actionId, jumpBoost)
  }
}
object EntityActionPacketBuilder {
  sealed trait EntityId
  sealed trait ActionId
  sealed trait JumpBoost
  type Complete = EntityActionPacket with EntityId with ActionId with JumpBoost
}
