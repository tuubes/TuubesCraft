package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.utils.{Pi2, InvPi2}
import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.network._

/** Packet class auto-generated by DataTractor */
final class EntityLookPacket(var entityId: Int, var yaw: Byte, var pitch: Byte, var onGround: Boolean) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(entityId)
    out.putByte(yaw)
    out.putByte(pitch)
    out.putBoolean(onGround)
  }
	
  override def obj = EntityLookPacket

  def radYaw: Float = {
    yaw * Pi2 / 256f
  }
  def radPitch: Float = {
    pitch * Pi2 / 256f
  }	
}
object EntityLookPacket extends PacketObj[EntityLookPacket] {
  override val id = 40
	
  override def read(in: NiolOutput): EntityLookPacket = {
    val entityId = in.getVarint()
    val yaw = in.getByte()
    val pitch = in.getByte()
    val onGround = in.getBoolean()
    new EntityLookPacket(entityId, yaw, pitch, onGround)
  }
}
/** Packet builder auto-generated by DataTractor */
final class EntityLookPacketBuilder[P <: EntityLookPacket] extends PacketBuilder[EntityLookPacket, Complete] {
  private[this] var entityId: Int = _
  private[this] var yaw: Byte = _
  private[this] var pitch: Byte = _
  private[this] var onGround: Boolean = _

  def withEntityId(entityId: Int): EntityLookPacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[EntityLookPacketBuilder[P with EntityId]]
  }

  def withYaw(yaw: Byte): EntityLookPacketBuilder[P with Yaw] = {
    this.yaw = yaw
    this.asInstanceOf[EntityLookPacketBuilder[P with Yaw]]
  }

  def withYaw(angle: Float): EntityLookPacketBuilder[P with Yaw] = {
    this.yaw = (angle * InvPi2 * 256f).toByte  
    this.asInstanceOf[EntityLookPacketBuilder[P with Yaw]]
  }

  def withPitch(pitch: Byte): EntityLookPacketBuilder[P with Pitch] = {
    this.pitch = pitch
    this.asInstanceOf[EntityLookPacketBuilder[P with Pitch]]
  }

  def withPitch(angle: Float): EntityLookPacketBuilder[P with Pitch] = {
    this.pitch = (angle * InvPi2 * 256f).toByte  
    this.asInstanceOf[EntityLookPacketBuilder[P with Pitch]]
  }

  def withOnGround(onGround: Boolean): EntityLookPacketBuilder[P with OnGround] = {
    this.onGround = onGround
    this.asInstanceOf[EntityLookPacketBuilder[P with OnGround]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new EntityLookPacket(entityId, yaw, pitch, onGround)
  }
}
object EntityLookPacketBuilder {
  sealed trait EntityId
  sealed trait Yaw
  sealed trait Pitch
  sealed trait OnGround
  type Complete = EntityLookPacketBuilder with EntityId with Yaw with Pitch with OnGround
}
