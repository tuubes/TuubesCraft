package org.tuubes.craft.mc1_12.play.serverbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import java.nio.charset.StandardCharsets.UTF_8
import org.tuubes.network._

/** Packet class auto-generated by DataTractor */
final class ClientSettingsPacket(var locale: String, var viewDistance: Byte, var chatMode: Int, var chatColors: Boolean, var displayedSkinParts: Int, var mainHand: Int) extends Packet {
  override def write(out: NiolOutput): Unit {
    out.putVarstring(locale, UTF_8)
    out.putByte(viewDistance)
    out.putVarint(chatMode)
    out.putBoolean(chatColors)
    out.putInt(displayedSkinParts)
    out.putVarint(mainHand)
  }
	
  override def id = ClientSettingsPacket.id

	
}
object ClientSettingsPacket extends PacketObj[ClientSettingsPacket] {
  override val id = 5
	
  override def read(in: NiolOutput): ClientSettingsPacket {
    val locale = in.getVarstring(UTF_8)
    val viewDistance = in.getByte()
    val chatMode = in.getVarint()
    val chatColors = in.getBoolean()
    val displayedSkinParts = in.getUnsignedByte()
    val mainHand = in.getVarint()
    new ClientSettingsPacket(locale, viewDistance, chatMode, chatColors, displayedSkinParts, mainHand)
  }
}
/** Packet builder auto-generated by DataTractor */
final class ClientSettingsPacketBuilder[P <: ClientSettingsPacket] extends PacketBuilder[ClientSettingsPacket, Complete] {
  private[this] var locale: String = _
  private[this] var viewDistance: Byte = _
  private[this] var chatMode: Int = _
  private[this] var chatColors: Boolean = _
  private[this] var displayedSkinParts: Int = _
  private[this] var mainHand: Int = _

  def withLocale(locale: String): ClientSettingsPacketBuilder[P with Locale] = {
    this.locale = locale
    this.asInstanceOf[ClientSettingsPacketBuilder[P with Locale]]
  }

  def withViewDistance(viewDistance: Byte): ClientSettingsPacketBuilder[P with ViewDistance] = {
    this.viewDistance = viewDistance
    this.asInstanceOf[ClientSettingsPacketBuilder[P with ViewDistance]]
  }

  def withChatMode(chatMode: Int): ClientSettingsPacketBuilder[P with ChatMode] = {
    this.chatMode = chatMode
    this.asInstanceOf[ClientSettingsPacketBuilder[P with ChatMode]]
  }

  def withChatColors(chatColors: Boolean): ClientSettingsPacketBuilder[P with ChatColors] = {
    this.chatColors = chatColors
    this.asInstanceOf[ClientSettingsPacketBuilder[P with ChatColors]]
  }

  def withDisplayedSkinParts(displayedSkinParts: Int): ClientSettingsPacketBuilder[P with DisplayedSkinParts] = {
    this.displayedSkinParts = displayedSkinParts
    this.asInstanceOf[ClientSettingsPacketBuilder[P with DisplayedSkinParts]]
  }

  def withMainHand(mainHand: Int): ClientSettingsPacketBuilder[P with MainHand] = {
    this.mainHand = mainHand
    this.asInstanceOf[ClientSettingsPacketBuilder[P with MainHand]]
  }

  override def build()(implicit evidence: P =:= Complete) {
    new ClientSettingsPacket(locale, viewDistance, chatMode, chatColors, displayedSkinParts, mainHand)
  }
}
object ClientSettingsPacketBuilder {
  sealed trait Locale
  sealed trait ViewDistance
  sealed trait ChatMode
  sealed trait ChatColors
  sealed trait DisplayedSkinParts
  sealed trait MainHand
  type Complete = ClientSettingsPacketBuilder with Locale with ViewDistance with ChatMode with ChatColors with DisplayedSkinParts with MainHand
}
