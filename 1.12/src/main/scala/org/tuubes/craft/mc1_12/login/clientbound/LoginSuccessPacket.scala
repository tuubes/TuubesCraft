package org.tuubes.craft.mc1_12.login.clientbound

import java.nio.charset.StandardCharsets.UTF_8
import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.network._

/** Packet class auto-generated by DataTractor */
final class LoginSuccessPacket(var uuid: String, var username: String) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putVarstring(uuid, UTF_8)
    out.putVarstring(username, UTF_8)
  }
	
  override def obj = LoginSuccessPacket

	
}
object LoginSuccessPacket extends PacketObj[LoginSuccessPacket] {
  override val id = 2
	
  override def read(in: NiolOutput): LoginSuccessPacket = {
    val uuid = in.getVarstring(UTF_8)
    val username = in.getVarstring(UTF_8)
    new LoginSuccessPacket(uuid, username)
  }
}
/** Packet builder auto-generated by DataTractor */
final class LoginSuccessPacketBuilder[P <: LoginSuccessPacket] extends PacketBuilder[LoginSuccessPacket, Complete] {
  private[this] var uuid: String = _
  private[this] var username: String = _

  def withUuid(uuid: String): LoginSuccessPacketBuilder[P with Uuid] = {
    this.uuid = uuid
    this.asInstanceOf[LoginSuccessPacketBuilder[P with Uuid]]
  }

  def withUsername(username: String): LoginSuccessPacketBuilder[P with Username] = {
    this.username = username
    this.asInstanceOf[LoginSuccessPacketBuilder[P with Username]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new LoginSuccessPacket(uuid, username)
  }
}
object LoginSuccessPacketBuilder {
  sealed trait Uuid
  sealed trait Username
  type Complete = LoginSuccessPacketBuilder with Uuid with Username
}
