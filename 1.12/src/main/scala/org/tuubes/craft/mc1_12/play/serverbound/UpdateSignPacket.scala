package org.tuubes.craft.mc1_12.play.serverbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.craft.CraftAttach
import java.nio.charset.StandardCharsets.UTF_8
import org.tuubes.core.network._
import UpdateSignPacketBuilder._
import com.electronwill.utils.Vec3i

/** Packet class auto-generated by DataTractor */
final class UpdateSignPacket(var location: Long, var line1: String, var line2: String, var line3: String, var line4: String) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putLong(location)
    out.putVarstring(line1, UTF_8)
    out.putVarstring(line2, UTF_8)
    out.putVarstring(line3, UTF_8)
    out.putVarstring(line4, UTF_8)
  }
	
  override def obj = UpdateSignPacket

  def vecLocation: Vec3i = {
    val x = location >> 38
    val y = (location >> 26) & 0xfff
    val z = location << 38 >> 38
    new Vec3i(x, y, z)
  }	
}
object UpdateSignPacket extends PacketObj[CraftAttach, UpdateSignPacket] {
  override val id = 28
	
  override def read(in: NiolInput): UpdateSignPacket = {
    val location = in.getLong()
    val line1 = in.getVarstring(UTF_8)
    val line2 = in.getVarstring(UTF_8)
    val line3 = in.getVarstring(UTF_8)
    val line4 = in.getVarstring(UTF_8)
    new UpdateSignPacket(location, line1, line2, line3, line4)
  }
}
/** Packet builder auto-generated by DataTractor */
final class UpdateSignPacketBuilder[P <: UpdateSignPacket] extends PacketBuilder[UpdateSignPacket, P =:= Complete] {
  private[this] var location: Long = _
  private[this] var line1: String = _
  private[this] var line2: String = _
  private[this] var line3: String = _
  private[this] var line4: String = _

  def withLocation(location: Long): UpdateSignPacketBuilder[P with Location] = {
    this.location = location
    this.asInstanceOf[UpdateSignPacketBuilder[P with Location]]
  }

  def withLocation(v: Vec3i): UpdateSignPacketBuilder[P with Location] = {
    this.location = ((v.x & 0x3ffffff) << 38) | ((v.y & 0xfff) << 26) | (v.z & 0x3ffffff)
    this.asInstanceOf[UpdateSignPacketBuilder[P with Location]]
  }

  def withLine1(line1: String): UpdateSignPacketBuilder[P with Line1] = {
    this.line1 = line1
    this.asInstanceOf[UpdateSignPacketBuilder[P with Line1]]
  }

  def withLine2(line2: String): UpdateSignPacketBuilder[P with Line2] = {
    this.line2 = line2
    this.asInstanceOf[UpdateSignPacketBuilder[P with Line2]]
  }

  def withLine3(line3: String): UpdateSignPacketBuilder[P with Line3] = {
    this.line3 = line3
    this.asInstanceOf[UpdateSignPacketBuilder[P with Line3]]
  }

  def withLine4(line4: String): UpdateSignPacketBuilder[P with Line4] = {
    this.line4 = line4
    this.asInstanceOf[UpdateSignPacketBuilder[P with Line4]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new UpdateSignPacket(location, line1, line2, line3, line4)
  }
}
object UpdateSignPacketBuilder {
  sealed trait Location
  sealed trait Line1
  sealed trait Line2
  sealed trait Line3
  sealed trait Line4
  type Complete = UpdateSignPacket with Location with Line1 with Line2 with Line3 with Line4
}
