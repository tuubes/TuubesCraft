package org.tuubes.craft.mc1_12.login.serverbound

import EncryptionResponsePacketBuilder._
import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.craft.CraftAttach
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class EncryptionResponsePacket(var sharedSecret: Array[Byte], var verifyToken: Array[Byte]) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(sharedSecret.length)
    out.putBytes(sharedSecret)
    out.putVarint(verifyToken.length)
    out.putBytes(verifyToken)
  }
	
  override def obj = EncryptionResponsePacket

	
}
object EncryptionResponsePacket extends PacketObj[CraftAttach, EncryptionResponsePacket] {
  override val id = 1
	
  override def read(in: NiolInput): EncryptionResponsePacket = {
    val sharedSecretLength = in.getVarint()
    val sharedSecret = in.getBytes(sharedSecretLength)
    val verifyTokenLength = in.getVarint()
    val verifyToken = in.getBytes(verifyTokenLength)
    new EncryptionResponsePacket(sharedSecret, verifyToken)
  }
}
/** Packet builder auto-generated by DataTractor */
final class EncryptionResponsePacketBuilder[P <: EncryptionResponsePacket] extends PacketBuilder[EncryptionResponsePacket, P =:= Complete] {
  private[this] var sharedSecret: Array[Byte] = _
  private[this] var verifyToken: Array[Byte] = _

  def withSharedSecret(sharedSecret: Array[Byte]): EncryptionResponsePacketBuilder[P with SharedSecret] = {
    this.sharedSecret = sharedSecret
    this.asInstanceOf[EncryptionResponsePacketBuilder[P with SharedSecret]]
  }

  def withVerifyToken(verifyToken: Array[Byte]): EncryptionResponsePacketBuilder[P with VerifyToken] = {
    this.verifyToken = verifyToken
    this.asInstanceOf[EncryptionResponsePacketBuilder[P with VerifyToken]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new EncryptionResponsePacket(sharedSecret, verifyToken)
  }
}
object EncryptionResponsePacketBuilder {
  sealed trait SharedSecret
  sealed trait VerifyToken
  type Complete = EncryptionResponsePacket with SharedSecret with VerifyToken
}
