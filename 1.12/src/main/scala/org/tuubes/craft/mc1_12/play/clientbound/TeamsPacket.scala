package org.tuubes.craft.mc1_12.play.clientbound

import java.nio.charset.StandardCharsets.UTF_8
import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.network._

/** Packet class auto-generated by DataTractor */
final class TeamsPacket(var teamName: String, var mode: Byte, var teamDisplayName: String, var teamPrefix: String, var teamSuffix: String, var friendlyFlags: Byte, var nameTagVisibility: String, var collisionRule: String, var color: Byte, var entities: Array[String], var noFields: Nothing, var teamDisplayName: String, var teamPrefix: String, var teamSuffix: String, var friendlyFlags: Byte, var nameTagVisibility: String, var collisionRule: String, var color: Byte, var entities: Array[String], var entities: Array[String]) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putVarstring(teamName, UTF_8)
    out.putByte(mode)
    out.putVarstring(teamDisplayName, UTF_8)
    out.putVarstring(teamPrefix, UTF_8)
    out.putVarstring(teamSuffix, UTF_8)
    out.putByte(friendlyFlags)
    out.putVarstring(nameTagVisibility, UTF_8)
    out.putVarstring(collisionRule, UTF_8)
    out.putByte(color)
    out.putVarint(entities.length)
    var i_entities = 0
    while (i_entities < entities.length) {
      out.putVarstring(entities(i_entities), UTF_8)
      i_entities += 1
    }
    // TODO write noFields
    out.putVarstring(teamDisplayName, UTF_8)
    out.putVarstring(teamPrefix, UTF_8)
    out.putVarstring(teamSuffix, UTF_8)
    out.putByte(friendlyFlags)
    out.putVarstring(nameTagVisibility, UTF_8)
    out.putVarstring(collisionRule, UTF_8)
    out.putByte(color)
    out.putVarint(entities.length)
    var i_entities = 0
    while (i_entities < entities.length) {
      out.putVarstring(entities(i_entities), UTF_8)
      i_entities += 1
    }
    out.putVarint(entities.length)
    var i_entities = 0
    while (i_entities < entities.length) {
      out.putVarstring(entities(i_entities), UTF_8)
      i_entities += 1
    }
  }
	
  override def obj = TeamsPacket

	
}
object TeamsPacket extends PacketObj[TeamsPacket] {
  override val id = 67
	
  override def read(in: NiolOutput): TeamsPacket = {
    val teamName = in.getVarstring(UTF_8)
    val mode = in.getByte()
    val teamDisplayName = in.getVarstring(UTF_8)
    val teamPrefix = in.getVarstring(UTF_8)
    val teamSuffix = in.getVarstring(UTF_8)
    val friendlyFlags = in.getByte()
    val nameTagVisibility = in.getVarstring(UTF_8)
    val collisionRule = in.getVarstring(UTF_8)
    val color = in.getByte()
    val entitiesLength = in.getVarint()
    var i_entities = 0
    val entities = new Array[String](entitiesLength)
    while (i_entities < entitiesLength) {
      entities(i_entities) = in.getVarstring(UTF_8)
      i_entities += 1
    }
    // TODO read noFields
    val teamDisplayName = in.getVarstring(UTF_8)
    val teamPrefix = in.getVarstring(UTF_8)
    val teamSuffix = in.getVarstring(UTF_8)
    val friendlyFlags = in.getByte()
    val nameTagVisibility = in.getVarstring(UTF_8)
    val collisionRule = in.getVarstring(UTF_8)
    val color = in.getByte()
    val entitiesLength = in.getVarint()
    var i_entities = 0
    val entities = new Array[String](entitiesLength)
    while (i_entities < entitiesLength) {
      entities(i_entities) = in.getVarstring(UTF_8)
      i_entities += 1
    }
    val entitiesLength = in.getVarint()
    var i_entities = 0
    val entities = new Array[String](entitiesLength)
    while (i_entities < entitiesLength) {
      entities(i_entities) = in.getVarstring(UTF_8)
      i_entities += 1
    }
    new TeamsPacket(teamName, mode, teamDisplayName, teamPrefix, teamSuffix, friendlyFlags, nameTagVisibility, collisionRule, color, entities, noFields, teamDisplayName, teamPrefix, teamSuffix, friendlyFlags, nameTagVisibility, collisionRule, color, entities, entities)
  }
}
/** Packet builder auto-generated by DataTractor */
final class TeamsPacketBuilder[P <: TeamsPacket] extends PacketBuilder[TeamsPacket, Complete] {
  private[this] var teamName: String = _
  private[this] var mode: Byte = _
  private[this] var teamDisplayName: String = _
  private[this] var teamPrefix: String = _
  private[this] var teamSuffix: String = _
  private[this] var friendlyFlags: Byte = _
  private[this] var nameTagVisibility: String = _
  private[this] var collisionRule: String = _
  private[this] var color: Byte = _
  private[this] var entities: Array[String] = _
  private[this] var noFields: Nothing = _
  private[this] var teamDisplayName: String = _
  private[this] var teamPrefix: String = _
  private[this] var teamSuffix: String = _
  private[this] var friendlyFlags: Byte = _
  private[this] var nameTagVisibility: String = _
  private[this] var collisionRule: String = _
  private[this] var color: Byte = _
  private[this] var entities: Array[String] = _
  private[this] var entities: Array[String] = _

  def withTeamName(teamName: String): TeamsPacketBuilder[P with TeamName] = {
    this.teamName = teamName
    this.asInstanceOf[TeamsPacketBuilder[P with TeamName]]
  }

  def withMode(mode: Byte): TeamsPacketBuilder[P with Mode] = {
    this.mode = mode
    this.asInstanceOf[TeamsPacketBuilder[P with Mode]]
  }

  def withTeamDisplayName(teamDisplayName: String): TeamsPacketBuilder[P with TeamDisplayName] = {
    this.teamDisplayName = teamDisplayName
    this.asInstanceOf[TeamsPacketBuilder[P with TeamDisplayName]]
  }

  def withTeamPrefix(teamPrefix: String): TeamsPacketBuilder[P with TeamPrefix] = {
    this.teamPrefix = teamPrefix
    this.asInstanceOf[TeamsPacketBuilder[P with TeamPrefix]]
  }

  def withTeamSuffix(teamSuffix: String): TeamsPacketBuilder[P with TeamSuffix] = {
    this.teamSuffix = teamSuffix
    this.asInstanceOf[TeamsPacketBuilder[P with TeamSuffix]]
  }

  def withFriendlyFlags(friendlyFlags: Byte): TeamsPacketBuilder[P with FriendlyFlags] = {
    this.friendlyFlags = friendlyFlags
    this.asInstanceOf[TeamsPacketBuilder[P with FriendlyFlags]]
  }

  def withNameTagVisibility(nameTagVisibility: String): TeamsPacketBuilder[P with NameTagVisibility] = {
    this.nameTagVisibility = nameTagVisibility
    this.asInstanceOf[TeamsPacketBuilder[P with NameTagVisibility]]
  }

  def withCollisionRule(collisionRule: String): TeamsPacketBuilder[P with CollisionRule] = {
    this.collisionRule = collisionRule
    this.asInstanceOf[TeamsPacketBuilder[P with CollisionRule]]
  }

  def withColor(color: Byte): TeamsPacketBuilder[P with Color] = {
    this.color = color
    this.asInstanceOf[TeamsPacketBuilder[P with Color]]
  }

  def withEntities(entities: Array[String]): TeamsPacketBuilder[P with Entities] = {
    this.entities = entities
    this.asInstanceOf[TeamsPacketBuilder[P with Entities]]
  }

  def withNoFields(noFields: Nothing): TeamsPacketBuilder[P with NoFields] = {
    this.noFields = noFields
    this.asInstanceOf[TeamsPacketBuilder[P with NoFields]]
  }

  def withTeamDisplayName(teamDisplayName: String): TeamsPacketBuilder[P with TeamDisplayName] = {
    this.teamDisplayName = teamDisplayName
    this.asInstanceOf[TeamsPacketBuilder[P with TeamDisplayName]]
  }

  def withTeamPrefix(teamPrefix: String): TeamsPacketBuilder[P with TeamPrefix] = {
    this.teamPrefix = teamPrefix
    this.asInstanceOf[TeamsPacketBuilder[P with TeamPrefix]]
  }

  def withTeamSuffix(teamSuffix: String): TeamsPacketBuilder[P with TeamSuffix] = {
    this.teamSuffix = teamSuffix
    this.asInstanceOf[TeamsPacketBuilder[P with TeamSuffix]]
  }

  def withFriendlyFlags(friendlyFlags: Byte): TeamsPacketBuilder[P with FriendlyFlags] = {
    this.friendlyFlags = friendlyFlags
    this.asInstanceOf[TeamsPacketBuilder[P with FriendlyFlags]]
  }

  def withNameTagVisibility(nameTagVisibility: String): TeamsPacketBuilder[P with NameTagVisibility] = {
    this.nameTagVisibility = nameTagVisibility
    this.asInstanceOf[TeamsPacketBuilder[P with NameTagVisibility]]
  }

  def withCollisionRule(collisionRule: String): TeamsPacketBuilder[P with CollisionRule] = {
    this.collisionRule = collisionRule
    this.asInstanceOf[TeamsPacketBuilder[P with CollisionRule]]
  }

  def withColor(color: Byte): TeamsPacketBuilder[P with Color] = {
    this.color = color
    this.asInstanceOf[TeamsPacketBuilder[P with Color]]
  }

  def withEntities(entities: Array[String]): TeamsPacketBuilder[P with Entities] = {
    this.entities = entities
    this.asInstanceOf[TeamsPacketBuilder[P with Entities]]
  }

  def withEntities(entities: Array[String]): TeamsPacketBuilder[P with Entities] = {
    this.entities = entities
    this.asInstanceOf[TeamsPacketBuilder[P with Entities]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new TeamsPacket(teamName, mode, teamDisplayName, teamPrefix, teamSuffix, friendlyFlags, nameTagVisibility, collisionRule, color, entities, noFields, teamDisplayName, teamPrefix, teamSuffix, friendlyFlags, nameTagVisibility, collisionRule, color, entities, entities)
  }
}
object TeamsPacketBuilder {
  sealed trait TeamName
  sealed trait Mode
  sealed trait TeamDisplayName
  sealed trait TeamPrefix
  sealed trait TeamSuffix
  sealed trait FriendlyFlags
  sealed trait NameTagVisibility
  sealed trait CollisionRule
  sealed trait Color
  sealed trait Entities
  sealed trait NoFields
  sealed trait TeamDisplayName
  sealed trait TeamPrefix
  sealed trait TeamSuffix
  sealed trait FriendlyFlags
  sealed trait NameTagVisibility
  sealed trait CollisionRule
  sealed trait Color
  sealed trait Entities
  sealed trait Entities
  type Complete = TeamsPacketBuilder with TeamName with Mode with TeamDisplayName with TeamPrefix with TeamSuffix with FriendlyFlags with NameTagVisibility with CollisionRule with Color with Entities with NoFields with TeamDisplayName with TeamPrefix with TeamSuffix with FriendlyFlags with NameTagVisibility with CollisionRule with Color with Entities with Entities
}
