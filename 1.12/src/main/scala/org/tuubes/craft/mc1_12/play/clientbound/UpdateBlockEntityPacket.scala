package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.compatibility._
import com.electronwill.nbj.TagCompound
import com.electronwill.niol.{NiolInput, NiolOutput}
import com.electronwill.utils.Vec3i
import org.tuubes.network._

/** Packet class auto-generated by DataTractor */
final class UpdateBlockEntityPacket(var location: Long, var action: Int, var nbtData: TagCompound) extends Packet {
  override def write(out: NiolOutput): Unit {
    out.putLong(location)
    out.putInt(action)
    nbtData.writeNamed(new NiolToDataOutput(out))
  }
	
  override def id = UpdateBlockEntityPacket.id

  def vecLocation: Vec3i = {
    val x = location >> 38
    val y = (location >> 26) & 0xfff
    val z = location << 38 >> 38
    new Vec3i(x, y, z)
  }	
}
object UpdateBlockEntityPacket extends PacketObj[UpdateBlockEntityPacket] {
  override val id = 9
	
  override def read(in: NiolOutput): UpdateBlockEntityPacket {
    val location = in.getLong()
    val action = in.getUnsignedByte()
    val nbtData = TagCompound.readNamed(new NiolToDataInput(in))
    new UpdateBlockEntityPacket(location, action, nbtData)
  }
}
/** Packet builder auto-generated by DataTractor */
final class UpdateBlockEntityPacketBuilder[P <: UpdateBlockEntityPacket] extends PacketBuilder[UpdateBlockEntityPacket, Complete] {
  private[this] var location: Long = _
  private[this] var action: Int = _
  private[this] var nbtData: TagCompound = _

  def withLocation(location: Long): UpdateBlockEntityPacketBuilder[P with Location] = {
    this.location = location
    this.asInstanceOf[UpdateBlockEntityPacketBuilder[P with Location]]
  }

  def withLocation(v: Vec3i): UpdateBlockEntityPacketBuilder[P with Location] = {
    this.location = ((v.x & 0x3ffffff) << 38) | ((v.y & 0xfff) << 26) | (v.z & 0x3ffffff)
    this.asInstanceOf[UpdateBlockEntityPacketBuilder[P with Location]]
  }

  def withAction(action: Int): UpdateBlockEntityPacketBuilder[P with Action] = {
    this.action = action
    this.asInstanceOf[UpdateBlockEntityPacketBuilder[P with Action]]
  }

  def withNbtData(nbtData: TagCompound): UpdateBlockEntityPacketBuilder[P with NbtData] = {
    this.nbtData = nbtData
    this.asInstanceOf[UpdateBlockEntityPacketBuilder[P with NbtData]]
  }

  override def build()(implicit evidence: P =:= Complete) {
    new UpdateBlockEntityPacket(location, action, nbtData)
  }
}
object UpdateBlockEntityPacketBuilder {
  sealed trait Location
  sealed trait Action
  sealed trait NbtData
  type Complete = UpdateBlockEntityPacketBuilder with Location with Action with NbtData
}
