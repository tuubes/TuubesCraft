package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.craft.CraftAttach
import java.nio.charset.StandardCharsets.UTF_8
import EntityPropertiesPacketBuilder._
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class EntityPropertiesPacket(var entityId: Int, var numberOfProperties: Int, var key: String, var value: Double, var modifiers: Array[???]) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(entityId)
    out.putInt(numberOfProperties)
    out.putVarstring(key, UTF_8)
    out.putDouble(value)
    out.putVarint(modifiers.length)
    var i_modifiers = 0
    while (i_modifiers < modifiers.length) {
      // TODO write modifiers(i_modifiers)
      i_modifiers += 1
    }
  }
	
  override def obj = EntityPropertiesPacket

	
}
object EntityPropertiesPacket extends PacketObj[CraftAttach, EntityPropertiesPacket] {
  override val id = 77
	
  override def read(in: NiolInput): EntityPropertiesPacket = {
    val entityId = in.getVarint()
    val numberOfProperties = in.getInt()
    val key = in.getVarstring(UTF_8)
    val value = in.getDouble()
    val modifiersLength = in.getVarint()
    var i_modifiers = 0
    val modifiers = new Array[???](modifiersLength)
    while (i_modifiers < modifiersLength) {
      // TODO read modifiers(i_modifiers)
      i_modifiers += 1
    }
    new EntityPropertiesPacket(entityId, numberOfProperties, key, value, modifiers)
  }
}
/** Packet builder auto-generated by DataTractor */
final class EntityPropertiesPacketBuilder[P <: EntityPropertiesPacket] extends PacketBuilder[EntityPropertiesPacket, P =:= Complete] {
  private[this] var entityId: Int = _
  private[this] var numberOfProperties: Int = _
  private[this] var key: String = _
  private[this] var value: Double = _
  private[this] var modifiers: Array[???] = _

  def withEntityId(entityId: Int): EntityPropertiesPacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[EntityPropertiesPacketBuilder[P with EntityId]]
  }

  def withNumberOfProperties(numberOfProperties: Int): EntityPropertiesPacketBuilder[P with NumberOfProperties] = {
    this.numberOfProperties = numberOfProperties
    this.asInstanceOf[EntityPropertiesPacketBuilder[P with NumberOfProperties]]
  }

  def withKey(key: String): EntityPropertiesPacketBuilder[P with Key] = {
    this.key = key
    this.asInstanceOf[EntityPropertiesPacketBuilder[P with Key]]
  }

  def withValue(value: Double): EntityPropertiesPacketBuilder[P with Value] = {
    this.value = value
    this.asInstanceOf[EntityPropertiesPacketBuilder[P with Value]]
  }

  def withModifiers(modifiers: Array[???]): EntityPropertiesPacketBuilder[P with Modifiers] = {
    this.modifiers = modifiers
    this.asInstanceOf[EntityPropertiesPacketBuilder[P with Modifiers]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new EntityPropertiesPacket(entityId, numberOfProperties, key, value, modifiers)
  }
}
object EntityPropertiesPacketBuilder {
  sealed trait EntityId
  sealed trait NumberOfProperties
  sealed trait Key
  sealed trait Value
  sealed trait Modifiers
  type Complete = EntityPropertiesPacket with EntityId with NumberOfProperties with Key with Value with Modifiers
}
