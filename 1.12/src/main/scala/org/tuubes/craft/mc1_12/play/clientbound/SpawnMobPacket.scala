package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.utils.{Pi2, InvPi2}
import com.electronwill.niol.{NiolInput, NiolOutput}
import SpawnMobPacketBuilder._
import org.tuubes.core.network._
import java.util.UUID
import org.tuubes.craft.CraftAttach

/** Packet class auto-generated by DataTractor */
final class SpawnMobPacket(var entityId: Int, var entityUuid: UUID, var `type`: Int, var x: Double, var y: Double, var z: Double, var yaw: Byte, var pitch: Byte, var headPitch: Byte, var velocityX: Short, var velocityY: Short, var velocityZ: Short, var metadata: AnyRef) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(entityId)
    out.putLong(entityUuid.getMostSignificantBits); out.putLong(entityUuid.getLeastSignificantBits)
    out.putVarint(`type`)
    out.putDouble(x)
    out.putDouble(y)
    out.putDouble(z)
    out.putByte(yaw)
    out.putByte(pitch)
    out.putByte(headPitch)
    out.putShort(velocityX)
    out.putShort(velocityY)
    out.putShort(velocityZ)
    // TODO write metadata
  }
	
  override def obj = SpawnMobPacket

  def radYaw: Float = {
    yaw * Pi2 / 256f
  }
  def radPitch: Float = {
    pitch * Pi2 / 256f
  }
  def radHeadPitch: Float = {
    headPitch * Pi2 / 256f
  }	
}
object SpawnMobPacket extends PacketObj[CraftAttach, SpawnMobPacket] {
  override val id = 3
	
  override def read(in: NiolInput): SpawnMobPacket = {
    val entityId = in.getVarint()
    val entityUuid = new UUID(in.getLong(), in.getLong())
    val `type` = in.getVarint()
    val x = in.getDouble()
    val y = in.getDouble()
    val z = in.getDouble()
    val yaw = in.getByte()
    val pitch = in.getByte()
    val headPitch = in.getByte()
    val velocityX = in.getShort()
    val velocityY = in.getShort()
    val velocityZ = in.getShort()
    // TODO read metadata
    new SpawnMobPacket(entityId, entityUuid, `type`, x, y, z, yaw, pitch, headPitch, velocityX, velocityY, velocityZ, metadata)
  }
}
/** Packet builder auto-generated by DataTractor */
final class SpawnMobPacketBuilder[P <: SpawnMobPacket] extends PacketBuilder[SpawnMobPacket, P =:= Complete] {
  private[this] var entityId: Int = _
  private[this] var entityUuid: UUID = _
  private[this] var `type`: Int = _
  private[this] var x: Double = _
  private[this] var y: Double = _
  private[this] var z: Double = _
  private[this] var yaw: Byte = _
  private[this] var pitch: Byte = _
  private[this] var headPitch: Byte = _
  private[this] var velocityX: Short = _
  private[this] var velocityY: Short = _
  private[this] var velocityZ: Short = _
  private[this] var metadata: AnyRef = _

  def withEntityId(entityId: Int): SpawnMobPacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[SpawnMobPacketBuilder[P with EntityId]]
  }

  def withEntityUuid(entityUuid: UUID): SpawnMobPacketBuilder[P with EntityUuid] = {
    this.entityUuid = entityUuid
    this.asInstanceOf[SpawnMobPacketBuilder[P with EntityUuid]]
  }

  def withType(`type`: Int): SpawnMobPacketBuilder[P with Type] = {
    this.`type` = `type`
    this.asInstanceOf[SpawnMobPacketBuilder[P with Type]]
  }

  def withX(x: Double): SpawnMobPacketBuilder[P with X] = {
    this.x = x
    this.asInstanceOf[SpawnMobPacketBuilder[P with X]]
  }

  def withY(y: Double): SpawnMobPacketBuilder[P with Y] = {
    this.y = y
    this.asInstanceOf[SpawnMobPacketBuilder[P with Y]]
  }

  def withZ(z: Double): SpawnMobPacketBuilder[P with Z] = {
    this.z = z
    this.asInstanceOf[SpawnMobPacketBuilder[P with Z]]
  }

  def withYaw(yaw: Byte): SpawnMobPacketBuilder[P with Yaw] = {
    this.yaw = yaw
    this.asInstanceOf[SpawnMobPacketBuilder[P with Yaw]]
  }

  def withYaw(angle: Float): SpawnMobPacketBuilder[P with Yaw] = {
    this.yaw = (angle * InvPi2 * 256f).toByte  
    this.asInstanceOf[SpawnMobPacketBuilder[P with Yaw]]
  }

  def withPitch(pitch: Byte): SpawnMobPacketBuilder[P with Pitch] = {
    this.pitch = pitch
    this.asInstanceOf[SpawnMobPacketBuilder[P with Pitch]]
  }

  def withPitch(angle: Float): SpawnMobPacketBuilder[P with Pitch] = {
    this.pitch = (angle * InvPi2 * 256f).toByte  
    this.asInstanceOf[SpawnMobPacketBuilder[P with Pitch]]
  }

  def withHeadPitch(headPitch: Byte): SpawnMobPacketBuilder[P with HeadPitch] = {
    this.headPitch = headPitch
    this.asInstanceOf[SpawnMobPacketBuilder[P with HeadPitch]]
  }

  def withHeadPitch(angle: Float): SpawnMobPacketBuilder[P with HeadPitch] = {
    this.headPitch = (angle * InvPi2 * 256f).toByte  
    this.asInstanceOf[SpawnMobPacketBuilder[P with HeadPitch]]
  }

  def withVelocityX(velocityX: Short): SpawnMobPacketBuilder[P with VelocityX] = {
    this.velocityX = velocityX
    this.asInstanceOf[SpawnMobPacketBuilder[P with VelocityX]]
  }

  def withVelocityY(velocityY: Short): SpawnMobPacketBuilder[P with VelocityY] = {
    this.velocityY = velocityY
    this.asInstanceOf[SpawnMobPacketBuilder[P with VelocityY]]
  }

  def withVelocityZ(velocityZ: Short): SpawnMobPacketBuilder[P with VelocityZ] = {
    this.velocityZ = velocityZ
    this.asInstanceOf[SpawnMobPacketBuilder[P with VelocityZ]]
  }

  def withMetadata(metadata: AnyRef): SpawnMobPacketBuilder[P with Metadata] = {
    this.metadata = metadata
    this.asInstanceOf[SpawnMobPacketBuilder[P with Metadata]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new SpawnMobPacket(entityId, entityUuid, `type`, x, y, z, yaw, pitch, headPitch, velocityX, velocityY, velocityZ, metadata)
  }
}
object SpawnMobPacketBuilder {
  sealed trait EntityId
  sealed trait EntityUuid
  sealed trait Type
  sealed trait X
  sealed trait Y
  sealed trait Z
  sealed trait Yaw
  sealed trait Pitch
  sealed trait HeadPitch
  sealed trait VelocityX
  sealed trait VelocityY
  sealed trait VelocityZ
  sealed trait Metadata
  type Complete = SpawnMobPacket with EntityId with EntityUuid with Type with X with Y with Z with Yaw with Pitch with HeadPitch with VelocityX with VelocityY with VelocityZ with Metadata
}
