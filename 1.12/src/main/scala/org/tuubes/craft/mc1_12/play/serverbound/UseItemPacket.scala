package org.tuubes.craft.mc1_12.play.serverbound

import org.tuubes.network._
import com.electronwill.niol.{NiolInput, NiolOutput}

/** Packet class auto-generated by DataTractor */
final class UseItemPacket(var hand: Int) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(hand)
  }
	
  override def obj = UseItemPacket

	
}
object UseItemPacket extends PacketObj[UseItemPacket] {
  override val id = 32
	
  override def read(in: NiolOutput): UseItemPacket = {
    val hand = in.getVarint()
    new UseItemPacket(hand)
  }
}
/** Packet builder auto-generated by DataTractor */
final class UseItemPacketBuilder[P <: UseItemPacket] extends PacketBuilder[UseItemPacket, Complete] {
  private[this] var hand: Int = _

  def withHand(hand: Int): UseItemPacketBuilder[P with Hand] = {
    this.hand = hand
    this.asInstanceOf[UseItemPacketBuilder[P with Hand]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new UseItemPacket(hand)
  }
}
object UseItemPacketBuilder {
  sealed trait Hand
  type Complete = UseItemPacketBuilder with Hand
}
