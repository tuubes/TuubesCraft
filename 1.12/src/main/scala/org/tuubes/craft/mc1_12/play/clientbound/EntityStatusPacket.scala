package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.network._

/** Packet class auto-generated by DataTractor */
final class EntityStatusPacket(var entityId: Int, var entityStatus: Byte) extends Packet {
  override def write(out: NiolOutput): Unit {
    out.putInt(entityId)
    out.putByte(entityStatus)
  }
	
  override def id = EntityStatusPacket.id

	
}
object EntityStatusPacket extends PacketObj[EntityStatusPacket] {
  override val id = 27
	
  override def read(in: NiolOutput): EntityStatusPacket {
    val entityId = in.getInt()
    val entityStatus = in.getByte()
    new EntityStatusPacket(entityId, entityStatus)
  }
}
/** Packet builder auto-generated by DataTractor */
final class EntityStatusPacketBuilder[P <: EntityStatusPacket] extends PacketBuilder[EntityStatusPacket, Complete] {
  private[this] var entityId: Int = _
  private[this] var entityStatus: Byte = _

  def withEntityId(entityId: Int): EntityStatusPacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[EntityStatusPacketBuilder[P with EntityId]]
  }

  def withEntityStatus(entityStatus: Byte): EntityStatusPacketBuilder[P with EntityStatus] = {
    this.entityStatus = entityStatus
    this.asInstanceOf[EntityStatusPacketBuilder[P with EntityStatus]]
  }

  override def build()(implicit evidence: P =:= Complete) {
    new EntityStatusPacket(entityId, entityStatus)
  }
}
object EntityStatusPacketBuilder {
  sealed trait EntityId
  sealed trait EntityStatus
  type Complete = EntityStatusPacketBuilder with EntityId with EntityStatus
}
