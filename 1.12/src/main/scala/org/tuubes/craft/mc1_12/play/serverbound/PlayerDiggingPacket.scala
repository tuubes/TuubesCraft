package org.tuubes.craft.mc1_12.play.serverbound

import org.tuubes.network._
import com.electronwill.niol.{NiolInput, NiolOutput}
import com.electronwill.utils.Vec3i

/** Packet class auto-generated by DataTractor */
final class PlayerDiggingPacket(var status: Int, var location: Long, var face: Byte) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(status)
    out.putLong(location)
    out.putByte(face)
  }
	
  override def obj = PlayerDiggingPacket

  def vecLocation: Vec3i = {
    val x = location >> 38
    val y = (location >> 26) & 0xfff
    val z = location << 38 >> 38
    new Vec3i(x, y, z)
  }	
}
object PlayerDiggingPacket extends PacketObj[PlayerDiggingPacket] {
  override val id = 20
	
  override def read(in: NiolOutput): PlayerDiggingPacket = {
    val status = in.getVarint()
    val location = in.getLong()
    val face = in.getByte()
    new PlayerDiggingPacket(status, location, face)
  }
}
/** Packet builder auto-generated by DataTractor */
final class PlayerDiggingPacketBuilder[P <: PlayerDiggingPacket] extends PacketBuilder[PlayerDiggingPacket, Complete] {
  private[this] var status: Int = _
  private[this] var location: Long = _
  private[this] var face: Byte = _

  def withStatus(status: Int): PlayerDiggingPacketBuilder[P with Status] = {
    this.status = status
    this.asInstanceOf[PlayerDiggingPacketBuilder[P with Status]]
  }

  def withLocation(location: Long): PlayerDiggingPacketBuilder[P with Location] = {
    this.location = location
    this.asInstanceOf[PlayerDiggingPacketBuilder[P with Location]]
  }

  def withLocation(v: Vec3i): PlayerDiggingPacketBuilder[P with Location] = {
    this.location = ((v.x & 0x3ffffff) << 38) | ((v.y & 0xfff) << 26) | (v.z & 0x3ffffff)
    this.asInstanceOf[PlayerDiggingPacketBuilder[P with Location]]
  }

  def withFace(face: Byte): PlayerDiggingPacketBuilder[P with Face] = {
    this.face = face
    this.asInstanceOf[PlayerDiggingPacketBuilder[P with Face]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new PlayerDiggingPacket(status, location, face)
  }
}
object PlayerDiggingPacketBuilder {
  sealed trait Status
  sealed trait Location
  sealed trait Face
  type Complete = PlayerDiggingPacketBuilder with Status with Location with Face
}
