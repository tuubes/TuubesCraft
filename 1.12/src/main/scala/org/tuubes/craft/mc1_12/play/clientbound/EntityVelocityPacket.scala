package org.tuubes.craft.mc1_12.play.clientbound

import org.tuubes.network._
import com.electronwill.niol.{NiolInput, NiolOutput}

/** Packet class auto-generated by DataTractor */
final class EntityVelocityPacket(var entityId: Int, var velocityX: Short, var velocityY: Short, var velocityZ: Short) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(entityId)
    out.putShort(velocityX)
    out.putShort(velocityY)
    out.putShort(velocityZ)
  }
	
  override def obj = EntityVelocityPacket

	
}
object EntityVelocityPacket extends PacketObj[EntityVelocityPacket] {
  override val id = 61
	
  override def read(in: NiolOutput): EntityVelocityPacket = {
    val entityId = in.getVarint()
    val velocityX = in.getShort()
    val velocityY = in.getShort()
    val velocityZ = in.getShort()
    new EntityVelocityPacket(entityId, velocityX, velocityY, velocityZ)
  }
}
/** Packet builder auto-generated by DataTractor */
final class EntityVelocityPacketBuilder[P <: EntityVelocityPacket] extends PacketBuilder[EntityVelocityPacket, Complete] {
  private[this] var entityId: Int = _
  private[this] var velocityX: Short = _
  private[this] var velocityY: Short = _
  private[this] var velocityZ: Short = _

  def withEntityId(entityId: Int): EntityVelocityPacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[EntityVelocityPacketBuilder[P with EntityId]]
  }

  def withVelocityX(velocityX: Short): EntityVelocityPacketBuilder[P with VelocityX] = {
    this.velocityX = velocityX
    this.asInstanceOf[EntityVelocityPacketBuilder[P with VelocityX]]
  }

  def withVelocityY(velocityY: Short): EntityVelocityPacketBuilder[P with VelocityY] = {
    this.velocityY = velocityY
    this.asInstanceOf[EntityVelocityPacketBuilder[P with VelocityY]]
  }

  def withVelocityZ(velocityZ: Short): EntityVelocityPacketBuilder[P with VelocityZ] = {
    this.velocityZ = velocityZ
    this.asInstanceOf[EntityVelocityPacketBuilder[P with VelocityZ]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new EntityVelocityPacket(entityId, velocityX, velocityY, velocityZ)
  }
}
object EntityVelocityPacketBuilder {
  sealed trait EntityId
  sealed trait VelocityX
  sealed trait VelocityY
  sealed trait VelocityZ
  type Complete = EntityVelocityPacketBuilder with EntityId with VelocityX with VelocityY with VelocityZ
}
