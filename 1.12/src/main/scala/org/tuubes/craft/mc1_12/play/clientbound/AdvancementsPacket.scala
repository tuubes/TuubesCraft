package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.craft.CraftAttach
import AdvancementsPacketBuilder._
import java.nio.charset.StandardCharsets.UTF_8
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class AdvancementsPacket(var resetOrClear: Boolean, var mappingSize: Int, var key: String, var value: ???, var identifiers: Array[String], var progressSize: Int, var key: String, var value: ???) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putBoolean(resetOrClear)
    out.putVarint(mappingSize)
    out.putVarstring(key, UTF_8)
    // TODO write value
    out.putVarint(identifiers.length)
    var i_identifiers = 0
    while (i_identifiers < identifiers.length) {
      out.putVarstring(identifiers(i_identifiers), UTF_8)
      i_identifiers += 1
    }
    out.putVarint(progressSize)
    out.putVarstring(key, UTF_8)
    // TODO write value
  }
	
  override def obj = AdvancementsPacket

	
}
object AdvancementsPacket extends PacketObj[CraftAttach, AdvancementsPacket] {
  override val id = 76
	
  override def read(in: NiolInput): AdvancementsPacket = {
    val resetOrClear = in.getBoolean()
    val mappingSize = in.getVarint()
    val key = in.getVarstring(UTF_8)
    // TODO read value
    val identifiersLength = in.getVarint()
    var i_identifiers = 0
    val identifiers = new Array[String](identifiersLength)
    while (i_identifiers < identifiersLength) {
      identifiers(i_identifiers) = in.getVarstring(UTF_8)
      i_identifiers += 1
    }
    val progressSize = in.getVarint()
    val key = in.getVarstring(UTF_8)
    // TODO read value
    new AdvancementsPacket(resetOrClear, mappingSize, key, value, identifiers, progressSize, key, value)
  }
}
/** Packet builder auto-generated by DataTractor */
final class AdvancementsPacketBuilder[P <: AdvancementsPacket] extends PacketBuilder[AdvancementsPacket, P =:= Complete] {
  private[this] var resetOrClear: Boolean = _
  private[this] var mappingSize: Int = _
  private[this] var key: String = _
  private[this] var value: ??? = _
  private[this] var identifiers: Array[String] = _
  private[this] var progressSize: Int = _
  private[this] var key: String = _
  private[this] var value: ??? = _

  def withResetOrClear(resetOrClear: Boolean): AdvancementsPacketBuilder[P with ResetOrClear] = {
    this.resetOrClear = resetOrClear
    this.asInstanceOf[AdvancementsPacketBuilder[P with ResetOrClear]]
  }

  def withMappingSize(mappingSize: Int): AdvancementsPacketBuilder[P with MappingSize] = {
    this.mappingSize = mappingSize
    this.asInstanceOf[AdvancementsPacketBuilder[P with MappingSize]]
  }

  def withKey(key: String): AdvancementsPacketBuilder[P with Key] = {
    this.key = key
    this.asInstanceOf[AdvancementsPacketBuilder[P with Key]]
  }

  def withValue(value: ???): AdvancementsPacketBuilder[P with Value] = {
    this.value = value
    this.asInstanceOf[AdvancementsPacketBuilder[P with Value]]
  }

  def withIdentifiers(identifiers: Array[String]): AdvancementsPacketBuilder[P with Identifiers] = {
    this.identifiers = identifiers
    this.asInstanceOf[AdvancementsPacketBuilder[P with Identifiers]]
  }

  def withProgressSize(progressSize: Int): AdvancementsPacketBuilder[P with ProgressSize] = {
    this.progressSize = progressSize
    this.asInstanceOf[AdvancementsPacketBuilder[P with ProgressSize]]
  }

  def withKey(key: String): AdvancementsPacketBuilder[P with Key] = {
    this.key = key
    this.asInstanceOf[AdvancementsPacketBuilder[P with Key]]
  }

  def withValue(value: ???): AdvancementsPacketBuilder[P with Value] = {
    this.value = value
    this.asInstanceOf[AdvancementsPacketBuilder[P with Value]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new AdvancementsPacket(resetOrClear, mappingSize, key, value, identifiers, progressSize, key, value)
  }
}
object AdvancementsPacketBuilder {
  sealed trait ResetOrClear
  sealed trait MappingSize
  sealed trait Key
  sealed trait Value
  sealed trait Identifiers
  sealed trait ProgressSize
  sealed trait Key
  sealed trait Value
  type Complete = AdvancementsPacket with ResetOrClear with MappingSize with Key with Value with Identifiers with ProgressSize with Key with Value
}
