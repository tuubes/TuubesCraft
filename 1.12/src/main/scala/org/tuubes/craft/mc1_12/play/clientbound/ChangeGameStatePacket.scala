package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.core.network._
import org.tuubes.craft.CraftAttach
import ChangeGameStatePacketBuilder._

/** Packet class auto-generated by DataTractor */
final class ChangeGameStatePacket(var reason: Int, var value: Float) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putInt(reason)
    out.putFloat(value)
  }
	
  override def obj = ChangeGameStatePacket

	
}
object ChangeGameStatePacket extends PacketObj[CraftAttach, ChangeGameStatePacket] {
  override val id = 30
	
  override def read(in: NiolInput): ChangeGameStatePacket = {
    val reason = in.getUnsignedByte()
    val value = in.getFloat()
    new ChangeGameStatePacket(reason, value)
  }
}
/** Packet builder auto-generated by DataTractor */
final class ChangeGameStatePacketBuilder[P <: ChangeGameStatePacket] extends PacketBuilder[ChangeGameStatePacket, P =:= Complete] {
  private[this] var reason: Int = _
  private[this] var value: Float = _

  def withReason(reason: Int): ChangeGameStatePacketBuilder[P with Reason] = {
    this.reason = reason
    this.asInstanceOf[ChangeGameStatePacketBuilder[P with Reason]]
  }

  def withValue(value: Float): ChangeGameStatePacketBuilder[P with Value] = {
    this.value = value
    this.asInstanceOf[ChangeGameStatePacketBuilder[P with Value]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new ChangeGameStatePacket(reason, value)
  }
}
object ChangeGameStatePacketBuilder {
  sealed trait Reason
  sealed trait Value
  type Complete = ChangeGameStatePacket with Reason with Value
}
