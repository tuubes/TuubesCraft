package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.utils.{Pi2, InvPi2}
import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.network._

/** Packet class auto-generated by DataTractor */
final class EntityHeadLookPacket(var entityId: Int, var headYaw: Byte) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(entityId)
    out.putByte(headYaw)
  }
	
  override def obj = EntityHeadLookPacket

  def radHeadYaw: Float = {
    headYaw * Pi2 / 256f
  }	
}
object EntityHeadLookPacket extends PacketObj[EntityHeadLookPacket] {
  override val id = 53
	
  override def read(in: NiolOutput): EntityHeadLookPacket = {
    val entityId = in.getVarint()
    val headYaw = in.getByte()
    new EntityHeadLookPacket(entityId, headYaw)
  }
}
/** Packet builder auto-generated by DataTractor */
final class EntityHeadLookPacketBuilder[P <: EntityHeadLookPacket] extends PacketBuilder[EntityHeadLookPacket, Complete] {
  private[this] var entityId: Int = _
  private[this] var headYaw: Byte = _

  def withEntityId(entityId: Int): EntityHeadLookPacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[EntityHeadLookPacketBuilder[P with EntityId]]
  }

  def withHeadYaw(headYaw: Byte): EntityHeadLookPacketBuilder[P with HeadYaw] = {
    this.headYaw = headYaw
    this.asInstanceOf[EntityHeadLookPacketBuilder[P with HeadYaw]]
  }

  def withHeadYaw(angle: Float): EntityHeadLookPacketBuilder[P with HeadYaw] = {
    this.headYaw = (angle * InvPi2 * 256f).toByte  
    this.asInstanceOf[EntityHeadLookPacketBuilder[P with HeadYaw]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new EntityHeadLookPacket(entityId, headYaw)
  }
}
object EntityHeadLookPacketBuilder {
  sealed trait EntityId
  sealed trait HeadYaw
  type Complete = EntityHeadLookPacketBuilder with EntityId with HeadYaw
}
