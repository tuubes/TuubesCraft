package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.network._

/** Packet class auto-generated by DataTractor */
final class EntityEffectPacket(var entityId: Int, var effectId: Byte, var amplifier: Byte, var duration: Int, var flags: Byte) extends Packet {
  override def write(out: NiolOutput): Unit {
    out.putVarint(entityId)
    out.putByte(effectId)
    out.putByte(amplifier)
    out.putVarint(duration)
    out.putByte(flags)
  }
	
  override def id = EntityEffectPacket.id

	
}
object EntityEffectPacket extends PacketObj[EntityEffectPacket] {
  override val id = 78
	
  override def read(in: NiolOutput): EntityEffectPacket {
    val entityId = in.getVarint()
    val effectId = in.getByte()
    val amplifier = in.getByte()
    val duration = in.getVarint()
    val flags = in.getByte()
    new EntityEffectPacket(entityId, effectId, amplifier, duration, flags)
  }
}
/** Packet builder auto-generated by DataTractor */
final class EntityEffectPacketBuilder[P <: EntityEffectPacket] extends PacketBuilder[EntityEffectPacket, Complete] {
  private[this] var entityId: Int = _
  private[this] var effectId: Byte = _
  private[this] var amplifier: Byte = _
  private[this] var duration: Int = _
  private[this] var flags: Byte = _

  def withEntityId(entityId: Int): EntityEffectPacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[EntityEffectPacketBuilder[P with EntityId]]
  }

  def withEffectId(effectId: Byte): EntityEffectPacketBuilder[P with EffectId] = {
    this.effectId = effectId
    this.asInstanceOf[EntityEffectPacketBuilder[P with EffectId]]
  }

  def withAmplifier(amplifier: Byte): EntityEffectPacketBuilder[P with Amplifier] = {
    this.amplifier = amplifier
    this.asInstanceOf[EntityEffectPacketBuilder[P with Amplifier]]
  }

  def withDuration(duration: Int): EntityEffectPacketBuilder[P with Duration] = {
    this.duration = duration
    this.asInstanceOf[EntityEffectPacketBuilder[P with Duration]]
  }

  def withFlags(flags: Byte): EntityEffectPacketBuilder[P with Flags] = {
    this.flags = flags
    this.asInstanceOf[EntityEffectPacketBuilder[P with Flags]]
  }

  override def build()(implicit evidence: P =:= Complete) {
    new EntityEffectPacket(entityId, effectId, amplifier, duration, flags)
  }
}
object EntityEffectPacketBuilder {
  sealed trait EntityId
  sealed trait EffectId
  sealed trait Amplifier
  sealed trait Duration
  sealed trait Flags
  type Complete = EntityEffectPacketBuilder with EntityId with EffectId with Amplifier with Duration with Flags
}
