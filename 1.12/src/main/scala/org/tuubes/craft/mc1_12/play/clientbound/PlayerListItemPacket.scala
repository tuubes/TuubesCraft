package org.tuubes.craft.mc1_12.play.clientbound

import java.util.UUID
import java.nio.charset.StandardCharsets.UTF_8
import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.network._

/** Packet class auto-generated by DataTractor */
final class PlayerListItemPacket(var action: Int, var numberOfPlayers: Int, var uuid: UUID, var name: String, var numberOfProperties: Int, var name: String, var value: String, var isSigned: Boolean, var signature: Option[String], var gamemode: Int, var ping: Int, var hasDisplayName: Boolean, var displayName: Option[String], var gamemode: Int, var ping: Int, var hasDisplayName: Boolean, var displayName: Option[String], var noFields: Nothing) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(action)
    out.putVarint(numberOfPlayers)
    out.putLong(uuid.getMostSignificantBits); out.putLong(uuid.getLeastSignificantBits)
    out.putVarstring(name, UTF_8)
    out.putVarint(numberOfProperties)
    out.putVarstring(name, UTF_8)
    out.putVarstring(value, UTF_8)
    out.putBoolean(isSigned)
    if (signature.isDefined) {
      out.putVarstring(signature, UTF_8)
    }
    out.putVarint(gamemode)
    out.putVarint(ping)
    out.putBoolean(hasDisplayName)
    if (displayName.isDefined) {
      out.putVarstring(displayName, UTF_8)
    }
    out.putVarint(gamemode)
    out.putVarint(ping)
    out.putBoolean(hasDisplayName)
    if (displayName.isDefined) {
      out.putVarstring(displayName, UTF_8)
    }
    // TODO write noFields
  }
	
  override def obj = PlayerListItemPacket

	
}
object PlayerListItemPacket extends PacketObj[PlayerListItemPacket] {
  override val id = 45
	
  override def read(in: NiolOutput): PlayerListItemPacket = {
    val action = in.getVarint()
    val numberOfPlayers = in.getVarint()
    val uuid = new UUID(in.getLong(), in.getLong())
    val name = in.getVarstring(UTF_8)
    val numberOfProperties = in.getVarint()
    val name = in.getVarstring(UTF_8)
    val value = in.getVarstring(UTF_8)
    val isSigned = in.getBoolean()
    // TODO read signature
    val gamemode = in.getVarint()
    val ping = in.getVarint()
    val hasDisplayName = in.getBoolean()
    // TODO read displayName
    val gamemode = in.getVarint()
    val ping = in.getVarint()
    val hasDisplayName = in.getBoolean()
    // TODO read displayName
    // TODO read noFields
    new PlayerListItemPacket(action, numberOfPlayers, uuid, name, numberOfProperties, name, value, isSigned, signature, gamemode, ping, hasDisplayName, displayName, gamemode, ping, hasDisplayName, displayName, noFields)
  }
}
/** Packet builder auto-generated by DataTractor */
final class PlayerListItemPacketBuilder[P <: PlayerListItemPacket] extends PacketBuilder[PlayerListItemPacket, Complete] {
  private[this] var action: Int = _
  private[this] var numberOfPlayers: Int = _
  private[this] var uuid: UUID = _
  private[this] var name: String = _
  private[this] var numberOfProperties: Int = _
  private[this] var name: String = _
  private[this] var value: String = _
  private[this] var isSigned: Boolean = _
  private[this] var signature: Option[String] = _
  private[this] var gamemode: Int = _
  private[this] var ping: Int = _
  private[this] var hasDisplayName: Boolean = _
  private[this] var displayName: Option[String] = _
  private[this] var gamemode: Int = _
  private[this] var ping: Int = _
  private[this] var hasDisplayName: Boolean = _
  private[this] var displayName: Option[String] = _
  private[this] var noFields: Nothing = _

  def withAction(action: Int): PlayerListItemPacketBuilder[P with Action] = {
    this.action = action
    this.asInstanceOf[PlayerListItemPacketBuilder[P with Action]]
  }

  def withNumberOfPlayers(numberOfPlayers: Int): PlayerListItemPacketBuilder[P with NumberOfPlayers] = {
    this.numberOfPlayers = numberOfPlayers
    this.asInstanceOf[PlayerListItemPacketBuilder[P with NumberOfPlayers]]
  }

  def withUuid(uuid: UUID): PlayerListItemPacketBuilder[P with Uuid] = {
    this.uuid = uuid
    this.asInstanceOf[PlayerListItemPacketBuilder[P with Uuid]]
  }

  def withName(name: String): PlayerListItemPacketBuilder[P with Name] = {
    this.name = name
    this.asInstanceOf[PlayerListItemPacketBuilder[P with Name]]
  }

  def withNumberOfProperties(numberOfProperties: Int): PlayerListItemPacketBuilder[P with NumberOfProperties] = {
    this.numberOfProperties = numberOfProperties
    this.asInstanceOf[PlayerListItemPacketBuilder[P with NumberOfProperties]]
  }

  def withName(name: String): PlayerListItemPacketBuilder[P with Name] = {
    this.name = name
    this.asInstanceOf[PlayerListItemPacketBuilder[P with Name]]
  }

  def withValue(value: String): PlayerListItemPacketBuilder[P with Value] = {
    this.value = value
    this.asInstanceOf[PlayerListItemPacketBuilder[P with Value]]
  }

  def withIsSigned(isSigned: Boolean): PlayerListItemPacketBuilder[P with IsSigned] = {
    this.isSigned = isSigned
    this.asInstanceOf[PlayerListItemPacketBuilder[P with IsSigned]]
  }

  def withSignature(signature: Option[String]): PlayerListItemPacketBuilder[P with Signature] = {
    this.signature = signature
    this.asInstanceOf[PlayerListItemPacketBuilder[P with Signature]]
  }

  def withGamemode(gamemode: Int): PlayerListItemPacketBuilder[P with Gamemode] = {
    this.gamemode = gamemode
    this.asInstanceOf[PlayerListItemPacketBuilder[P with Gamemode]]
  }

  def withPing(ping: Int): PlayerListItemPacketBuilder[P with Ping] = {
    this.ping = ping
    this.asInstanceOf[PlayerListItemPacketBuilder[P with Ping]]
  }

  def withHasDisplayName(hasDisplayName: Boolean): PlayerListItemPacketBuilder[P with HasDisplayName] = {
    this.hasDisplayName = hasDisplayName
    this.asInstanceOf[PlayerListItemPacketBuilder[P with HasDisplayName]]
  }

  def withDisplayName(displayName: Option[String]): PlayerListItemPacketBuilder[P with DisplayName] = {
    this.displayName = displayName
    this.asInstanceOf[PlayerListItemPacketBuilder[P with DisplayName]]
  }

  def withGamemode(gamemode: Int): PlayerListItemPacketBuilder[P with Gamemode] = {
    this.gamemode = gamemode
    this.asInstanceOf[PlayerListItemPacketBuilder[P with Gamemode]]
  }

  def withPing(ping: Int): PlayerListItemPacketBuilder[P with Ping] = {
    this.ping = ping
    this.asInstanceOf[PlayerListItemPacketBuilder[P with Ping]]
  }

  def withHasDisplayName(hasDisplayName: Boolean): PlayerListItemPacketBuilder[P with HasDisplayName] = {
    this.hasDisplayName = hasDisplayName
    this.asInstanceOf[PlayerListItemPacketBuilder[P with HasDisplayName]]
  }

  def withDisplayName(displayName: Option[String]): PlayerListItemPacketBuilder[P with DisplayName] = {
    this.displayName = displayName
    this.asInstanceOf[PlayerListItemPacketBuilder[P with DisplayName]]
  }

  def withNoFields(noFields: Nothing): PlayerListItemPacketBuilder[P with NoFields] = {
    this.noFields = noFields
    this.asInstanceOf[PlayerListItemPacketBuilder[P with NoFields]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new PlayerListItemPacket(action, numberOfPlayers, uuid, name, numberOfProperties, name, value, isSigned, signature, gamemode, ping, hasDisplayName, displayName, gamemode, ping, hasDisplayName, displayName, noFields)
  }
}
object PlayerListItemPacketBuilder {
  sealed trait Action
  sealed trait NumberOfPlayers
  sealed trait Uuid
  sealed trait Name
  sealed trait NumberOfProperties
  sealed trait Name
  sealed trait Value
  sealed trait IsSigned
  sealed trait Signature
  sealed trait Gamemode
  sealed trait Ping
  sealed trait HasDisplayName
  sealed trait DisplayName
  sealed trait Gamemode
  sealed trait Ping
  sealed trait HasDisplayName
  sealed trait DisplayName
  sealed trait NoFields
  type Complete = PlayerListItemPacketBuilder with Action with NumberOfPlayers with Uuid with Name with NumberOfProperties with Name with Value with IsSigned with Signature with Gamemode with Ping with HasDisplayName with DisplayName with Gamemode with Ping with HasDisplayName with DisplayName with NoFields
}
