package org.tuubes.craft.mc1_12.play.clientbound

import org.tuubes.network._
import com.electronwill.niol.{NiolInput, NiolOutput}

/** Packet class auto-generated by DataTractor */
final class RemoveEntityEffectPacket(var entityId: Int, var effectId: Byte) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(entityId)
    out.putByte(effectId)
  }
	
  override def obj = RemoveEntityEffectPacket

	
}
object RemoveEntityEffectPacket extends PacketObj[RemoveEntityEffectPacket] {
  override val id = 50
	
  override def read(in: NiolOutput): RemoveEntityEffectPacket = {
    val entityId = in.getVarint()
    val effectId = in.getByte()
    new RemoveEntityEffectPacket(entityId, effectId)
  }
}
/** Packet builder auto-generated by DataTractor */
final class RemoveEntityEffectPacketBuilder[P <: RemoveEntityEffectPacket] extends PacketBuilder[RemoveEntityEffectPacket, Complete] {
  private[this] var entityId: Int = _
  private[this] var effectId: Byte = _

  def withEntityId(entityId: Int): RemoveEntityEffectPacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[RemoveEntityEffectPacketBuilder[P with EntityId]]
  }

  def withEffectId(effectId: Byte): RemoveEntityEffectPacketBuilder[P with EffectId] = {
    this.effectId = effectId
    this.asInstanceOf[RemoveEntityEffectPacketBuilder[P with EffectId]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new RemoveEntityEffectPacket(entityId, effectId)
  }
}
object RemoveEntityEffectPacketBuilder {
  sealed trait EntityId
  sealed trait EffectId
  type Complete = RemoveEntityEffectPacketBuilder with EntityId with EffectId
}
