package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.core.network._
import org.tuubes.craft.CraftAttach
import WorldBorderPacketBuilder._

/** Packet class auto-generated by DataTractor */
final class WorldBorderPacket(var action: Int, var diameter: Double, var oldDiameter: Double, var newDiameter: Double, var speed: Long, var x: Double, var z: Double, var x: Double, var z: Double, var oldDiameter: Double, var newDiameter: Double, var speed: Long, var portalTeleportBoundary: Int, var warningTime: Int, var warningBlocks: Int, var warningTime: Int, var warningBlocks: Int) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(action)
    out.putDouble(diameter)
    out.putDouble(oldDiameter)
    out.putDouble(newDiameter)
    out.putVarlong(speed)
    out.putDouble(x)
    out.putDouble(z)
    out.putDouble(x)
    out.putDouble(z)
    out.putDouble(oldDiameter)
    out.putDouble(newDiameter)
    out.putVarlong(speed)
    out.putVarint(portalTeleportBoundary)
    out.putVarint(warningTime)
    out.putVarint(warningBlocks)
    out.putVarint(warningTime)
    out.putVarint(warningBlocks)
  }
	
  override def obj = WorldBorderPacket

	
}
object WorldBorderPacket extends PacketObj[CraftAttach, WorldBorderPacket] {
  override val id = 55
	
  override def read(in: NiolInput): WorldBorderPacket = {
    val action = in.getVarint()
    val diameter = in.getDouble()
    val oldDiameter = in.getDouble()
    val newDiameter = in.getDouble()
    val speed = in.getVarlong()
    val x = in.getDouble()
    val z = in.getDouble()
    val x = in.getDouble()
    val z = in.getDouble()
    val oldDiameter = in.getDouble()
    val newDiameter = in.getDouble()
    val speed = in.getVarlong()
    val portalTeleportBoundary = in.getVarint()
    val warningTime = in.getVarint()
    val warningBlocks = in.getVarint()
    val warningTime = in.getVarint()
    val warningBlocks = in.getVarint()
    new WorldBorderPacket(action, diameter, oldDiameter, newDiameter, speed, x, z, x, z, oldDiameter, newDiameter, speed, portalTeleportBoundary, warningTime, warningBlocks, warningTime, warningBlocks)
  }
}
/** Packet builder auto-generated by DataTractor */
final class WorldBorderPacketBuilder[P <: WorldBorderPacket] extends PacketBuilder[WorldBorderPacket, P =:= Complete] {
  private[this] var action: Int = _
  private[this] var diameter: Double = _
  private[this] var oldDiameter: Double = _
  private[this] var newDiameter: Double = _
  private[this] var speed: Long = _
  private[this] var x: Double = _
  private[this] var z: Double = _
  private[this] var x: Double = _
  private[this] var z: Double = _
  private[this] var oldDiameter: Double = _
  private[this] var newDiameter: Double = _
  private[this] var speed: Long = _
  private[this] var portalTeleportBoundary: Int = _
  private[this] var warningTime: Int = _
  private[this] var warningBlocks: Int = _
  private[this] var warningTime: Int = _
  private[this] var warningBlocks: Int = _

  def withAction(action: Int): WorldBorderPacketBuilder[P with Action] = {
    this.action = action
    this.asInstanceOf[WorldBorderPacketBuilder[P with Action]]
  }

  def withDiameter(diameter: Double): WorldBorderPacketBuilder[P with Diameter] = {
    this.diameter = diameter
    this.asInstanceOf[WorldBorderPacketBuilder[P with Diameter]]
  }

  def withOldDiameter(oldDiameter: Double): WorldBorderPacketBuilder[P with OldDiameter] = {
    this.oldDiameter = oldDiameter
    this.asInstanceOf[WorldBorderPacketBuilder[P with OldDiameter]]
  }

  def withNewDiameter(newDiameter: Double): WorldBorderPacketBuilder[P with NewDiameter] = {
    this.newDiameter = newDiameter
    this.asInstanceOf[WorldBorderPacketBuilder[P with NewDiameter]]
  }

  def withSpeed(speed: Long): WorldBorderPacketBuilder[P with Speed] = {
    this.speed = speed
    this.asInstanceOf[WorldBorderPacketBuilder[P with Speed]]
  }

  def withX(x: Double): WorldBorderPacketBuilder[P with X] = {
    this.x = x
    this.asInstanceOf[WorldBorderPacketBuilder[P with X]]
  }

  def withZ(z: Double): WorldBorderPacketBuilder[P with Z] = {
    this.z = z
    this.asInstanceOf[WorldBorderPacketBuilder[P with Z]]
  }

  def withX(x: Double): WorldBorderPacketBuilder[P with X] = {
    this.x = x
    this.asInstanceOf[WorldBorderPacketBuilder[P with X]]
  }

  def withZ(z: Double): WorldBorderPacketBuilder[P with Z] = {
    this.z = z
    this.asInstanceOf[WorldBorderPacketBuilder[P with Z]]
  }

  def withOldDiameter(oldDiameter: Double): WorldBorderPacketBuilder[P with OldDiameter] = {
    this.oldDiameter = oldDiameter
    this.asInstanceOf[WorldBorderPacketBuilder[P with OldDiameter]]
  }

  def withNewDiameter(newDiameter: Double): WorldBorderPacketBuilder[P with NewDiameter] = {
    this.newDiameter = newDiameter
    this.asInstanceOf[WorldBorderPacketBuilder[P with NewDiameter]]
  }

  def withSpeed(speed: Long): WorldBorderPacketBuilder[P with Speed] = {
    this.speed = speed
    this.asInstanceOf[WorldBorderPacketBuilder[P with Speed]]
  }

  def withPortalTeleportBoundary(portalTeleportBoundary: Int): WorldBorderPacketBuilder[P with PortalTeleportBoundary] = {
    this.portalTeleportBoundary = portalTeleportBoundary
    this.asInstanceOf[WorldBorderPacketBuilder[P with PortalTeleportBoundary]]
  }

  def withWarningTime(warningTime: Int): WorldBorderPacketBuilder[P with WarningTime] = {
    this.warningTime = warningTime
    this.asInstanceOf[WorldBorderPacketBuilder[P with WarningTime]]
  }

  def withWarningBlocks(warningBlocks: Int): WorldBorderPacketBuilder[P with WarningBlocks] = {
    this.warningBlocks = warningBlocks
    this.asInstanceOf[WorldBorderPacketBuilder[P with WarningBlocks]]
  }

  def withWarningTime(warningTime: Int): WorldBorderPacketBuilder[P with WarningTime] = {
    this.warningTime = warningTime
    this.asInstanceOf[WorldBorderPacketBuilder[P with WarningTime]]
  }

  def withWarningBlocks(warningBlocks: Int): WorldBorderPacketBuilder[P with WarningBlocks] = {
    this.warningBlocks = warningBlocks
    this.asInstanceOf[WorldBorderPacketBuilder[P with WarningBlocks]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new WorldBorderPacket(action, diameter, oldDiameter, newDiameter, speed, x, z, x, z, oldDiameter, newDiameter, speed, portalTeleportBoundary, warningTime, warningBlocks, warningTime, warningBlocks)
  }
}
object WorldBorderPacketBuilder {
  sealed trait Action
  sealed trait Diameter
  sealed trait OldDiameter
  sealed trait NewDiameter
  sealed trait Speed
  sealed trait X
  sealed trait Z
  sealed trait X
  sealed trait Z
  sealed trait OldDiameter
  sealed trait NewDiameter
  sealed trait Speed
  sealed trait PortalTeleportBoundary
  sealed trait WarningTime
  sealed trait WarningBlocks
  sealed trait WarningTime
  sealed trait WarningBlocks
  type Complete = WorldBorderPacket with Action with Diameter with OldDiameter with NewDiameter with Speed with X with Z with X with Z with OldDiameter with NewDiameter with Speed with PortalTeleportBoundary with WarningTime with WarningBlocks with WarningTime with WarningBlocks
}
