package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import com.electronwill.utils.Vec3i
import org.tuubes.network._

/** Packet class auto-generated by DataTractor */
final class EffectPacket(var effectId: Int, var location: Long, var data: Int, var disableRelativeVolume: Boolean) extends Packet {
  override def write(out: NiolOutput): Unit {
    out.putInt(effectId)
    out.putLong(location)
    out.putInt(data)
    out.putBoolean(disableRelativeVolume)
  }
	
  override def id = EffectPacket.id

  def vecLocation: Vec3i = {
    val x = location >> 38
    val y = (location >> 26) & 0xfff
    val z = location << 38 >> 38
    new Vec3i(x, y, z)
  }	
}
object EffectPacket extends PacketObj[EffectPacket] {
  override val id = 33
	
  override def read(in: NiolOutput): EffectPacket {
    val effectId = in.getInt()
    val location = in.getLong()
    val data = in.getInt()
    val disableRelativeVolume = in.getBoolean()
    new EffectPacket(effectId, location, data, disableRelativeVolume)
  }
}
/** Packet builder auto-generated by DataTractor */
final class EffectPacketBuilder[P <: EffectPacket] extends PacketBuilder[EffectPacket, Complete] {
  private[this] var effectId: Int = _
  private[this] var location: Long = _
  private[this] var data: Int = _
  private[this] var disableRelativeVolume: Boolean = _

  def withEffectId(effectId: Int): EffectPacketBuilder[P with EffectId] = {
    this.effectId = effectId
    this.asInstanceOf[EffectPacketBuilder[P with EffectId]]
  }

  def withLocation(location: Long): EffectPacketBuilder[P with Location] = {
    this.location = location
    this.asInstanceOf[EffectPacketBuilder[P with Location]]
  }

  def withLocation(v: Vec3i): EffectPacketBuilder[P with Location] = {
    this.location = ((v.x & 0x3ffffff) << 38) | ((v.y & 0xfff) << 26) | (v.z & 0x3ffffff)
    this.asInstanceOf[EffectPacketBuilder[P with Location]]
  }

  def withData(data: Int): EffectPacketBuilder[P with Data] = {
    this.data = data
    this.asInstanceOf[EffectPacketBuilder[P with Data]]
  }

  def withDisableRelativeVolume(disableRelativeVolume: Boolean): EffectPacketBuilder[P with DisableRelativeVolume] = {
    this.disableRelativeVolume = disableRelativeVolume
    this.asInstanceOf[EffectPacketBuilder[P with DisableRelativeVolume]]
  }

  override def build()(implicit evidence: P =:= Complete) {
    new EffectPacket(effectId, location, data, disableRelativeVolume)
  }
}
object EffectPacketBuilder {
  sealed trait EffectId
  sealed trait Location
  sealed trait Data
  sealed trait DisableRelativeVolume
  type Complete = EffectPacketBuilder with EffectId with Location with Data with DisableRelativeVolume
}
