package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import java.nio.charset.StandardCharsets.UTF_8
import org.tuubes.network._

/** Packet class auto-generated by DataTractor */
final class ChatMessagePacket(var jsonData: String, var position: Byte) extends Packet {
  override def write(out: NiolOutput): Unit {
    out.putVarstring(jsonData, UTF_8)
    out.putByte(position)
  }
	
  override def id = ChatMessagePacket.id

	
}
object ChatMessagePacket extends PacketObj[ChatMessagePacket] {
  override val id = 15
	
  override def read(in: NiolOutput): ChatMessagePacket {
    val jsonData = in.getVarstring(UTF_8)
    val position = in.getByte()
    new ChatMessagePacket(jsonData, position)
  }
}
/** Packet builder auto-generated by DataTractor */
final class ChatMessagePacketBuilder[P <: ChatMessagePacket] extends PacketBuilder[ChatMessagePacket, Complete] {
  private[this] var jsonData: String = _
  private[this] var position: Byte = _

  def withJsonData(jsonData: String): ChatMessagePacketBuilder[P with JsonData] = {
    this.jsonData = jsonData
    this.asInstanceOf[ChatMessagePacketBuilder[P with JsonData]]
  }

  def withPosition(position: Byte): ChatMessagePacketBuilder[P with Position] = {
    this.position = position
    this.asInstanceOf[ChatMessagePacketBuilder[P with Position]]
  }

  override def build()(implicit evidence: P =:= Complete) {
    new ChatMessagePacket(jsonData, position)
  }
}
object ChatMessagePacketBuilder {
  sealed trait JsonData
  sealed trait Position
  type Complete = ChatMessagePacketBuilder with JsonData with Position
}
