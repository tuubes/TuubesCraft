package org.tuubes.craft.mc1_12.play.clientbound

import SetCooldownPacketBuilder._
import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.craft.CraftAttach
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class SetCooldownPacket(var itemId: Int, var cooldownTicks: Int) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(itemId)
    out.putVarint(cooldownTicks)
  }
	
  override def obj = SetCooldownPacket

	
}
object SetCooldownPacket extends PacketObj[CraftAttach, SetCooldownPacket] {
  override val id = 23
	
  override def read(in: NiolInput): SetCooldownPacket = {
    val itemId = in.getVarint()
    val cooldownTicks = in.getVarint()
    new SetCooldownPacket(itemId, cooldownTicks)
  }
}
/** Packet builder auto-generated by DataTractor */
final class SetCooldownPacketBuilder[P <: SetCooldownPacket] extends PacketBuilder[SetCooldownPacket, P =:= Complete] {
  private[this] var itemId: Int = _
  private[this] var cooldownTicks: Int = _

  def withItemId(itemId: Int): SetCooldownPacketBuilder[P with ItemId] = {
    this.itemId = itemId
    this.asInstanceOf[SetCooldownPacketBuilder[P with ItemId]]
  }

  def withCooldownTicks(cooldownTicks: Int): SetCooldownPacketBuilder[P with CooldownTicks] = {
    this.cooldownTicks = cooldownTicks
    this.asInstanceOf[SetCooldownPacketBuilder[P with CooldownTicks]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new SetCooldownPacket(itemId, cooldownTicks)
  }
}
object SetCooldownPacketBuilder {
  sealed trait ItemId
  sealed trait CooldownTicks
  type Complete = SetCooldownPacket with ItemId with CooldownTicks
}
