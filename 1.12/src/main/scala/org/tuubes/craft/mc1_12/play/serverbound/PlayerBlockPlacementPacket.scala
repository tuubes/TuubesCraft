package org.tuubes.craft.mc1_12.play.serverbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import com.electronwill.utils.Vec3i
import org.tuubes.network._

/** Packet class auto-generated by DataTractor */
final class PlayerBlockPlacementPacket(var location: Long, var face: Int, var hand: Int, var cursorPositionX: Float, var cursorPositionY: Float, var cursorPositionZ: Float) extends Packet {
  override def write(out: NiolOutput): Unit {
    out.putLong(location)
    out.putVarint(face)
    out.putVarint(hand)
    out.putFloat(cursorPositionX)
    out.putFloat(cursorPositionY)
    out.putFloat(cursorPositionZ)
  }
	
  override def id = PlayerBlockPlacementPacket.id

  def vecLocation: Vec3i = {
    val x = location >> 38
    val y = (location >> 26) & 0xfff
    val z = location << 38 >> 38
    new Vec3i(x, y, z)
  }	
}
object PlayerBlockPlacementPacket extends PacketObj[PlayerBlockPlacementPacket] {
  override val id = 31
	
  override def read(in: NiolOutput): PlayerBlockPlacementPacket {
    val location = in.getLong()
    val face = in.getVarint()
    val hand = in.getVarint()
    val cursorPositionX = in.getFloat()
    val cursorPositionY = in.getFloat()
    val cursorPositionZ = in.getFloat()
    new PlayerBlockPlacementPacket(location, face, hand, cursorPositionX, cursorPositionY, cursorPositionZ)
  }
}
/** Packet builder auto-generated by DataTractor */
final class PlayerBlockPlacementPacketBuilder[P <: PlayerBlockPlacementPacket] extends PacketBuilder[PlayerBlockPlacementPacket, Complete] {
  private[this] var location: Long = _
  private[this] var face: Int = _
  private[this] var hand: Int = _
  private[this] var cursorPositionX: Float = _
  private[this] var cursorPositionY: Float = _
  private[this] var cursorPositionZ: Float = _

  def withLocation(location: Long): PlayerBlockPlacementPacketBuilder[P with Location] = {
    this.location = location
    this.asInstanceOf[PlayerBlockPlacementPacketBuilder[P with Location]]
  }

  def withLocation(v: Vec3i): PlayerBlockPlacementPacketBuilder[P with Location] = {
    this.location = ((v.x & 0x3ffffff) << 38) | ((v.y & 0xfff) << 26) | (v.z & 0x3ffffff)
    this.asInstanceOf[PlayerBlockPlacementPacketBuilder[P with Location]]
  }

  def withFace(face: Int): PlayerBlockPlacementPacketBuilder[P with Face] = {
    this.face = face
    this.asInstanceOf[PlayerBlockPlacementPacketBuilder[P with Face]]
  }

  def withHand(hand: Int): PlayerBlockPlacementPacketBuilder[P with Hand] = {
    this.hand = hand
    this.asInstanceOf[PlayerBlockPlacementPacketBuilder[P with Hand]]
  }

  def withCursorPositionX(cursorPositionX: Float): PlayerBlockPlacementPacketBuilder[P with CursorPositionX] = {
    this.cursorPositionX = cursorPositionX
    this.asInstanceOf[PlayerBlockPlacementPacketBuilder[P with CursorPositionX]]
  }

  def withCursorPositionY(cursorPositionY: Float): PlayerBlockPlacementPacketBuilder[P with CursorPositionY] = {
    this.cursorPositionY = cursorPositionY
    this.asInstanceOf[PlayerBlockPlacementPacketBuilder[P with CursorPositionY]]
  }

  def withCursorPositionZ(cursorPositionZ: Float): PlayerBlockPlacementPacketBuilder[P with CursorPositionZ] = {
    this.cursorPositionZ = cursorPositionZ
    this.asInstanceOf[PlayerBlockPlacementPacketBuilder[P with CursorPositionZ]]
  }

  override def build()(implicit evidence: P =:= Complete) {
    new PlayerBlockPlacementPacket(location, face, hand, cursorPositionX, cursorPositionY, cursorPositionZ)
  }
}
object PlayerBlockPlacementPacketBuilder {
  sealed trait Location
  sealed trait Face
  sealed trait Hand
  sealed trait CursorPositionX
  sealed trait CursorPositionY
  sealed trait CursorPositionZ
  type Complete = PlayerBlockPlacementPacketBuilder with Location with Face with Hand with CursorPositionX with CursorPositionY with CursorPositionZ
}
