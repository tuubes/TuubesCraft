package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.utils.Vec3i
import com.electronwill.niol.{NiolInput, NiolOutput}
import java.nio.charset.StandardCharsets.UTF_8
import org.tuubes.core.network._
import java.util.UUID
import org.tuubes.craft.CraftAttach
import SpawnPaintingPacketBuilder._

/** Packet class auto-generated by DataTractor */
final class SpawnPaintingPacket(var entityId: Int, var entityUuid: UUID, var title: String, var location: Long, var direction: Byte) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(entityId)
    out.putLong(entityUuid.getMostSignificantBits); out.putLong(entityUuid.getLeastSignificantBits)
    out.putVarstring(title, UTF_8)
    out.putLong(location)
    out.putByte(direction)
  }
	
  override def obj = SpawnPaintingPacket

  def vecLocation: Vec3i = {
    val x = location >> 38
    val y = (location >> 26) & 0xfff
    val z = location << 38 >> 38
    new Vec3i(x, y, z)
  }	
}
object SpawnPaintingPacket extends PacketObj[CraftAttach, SpawnPaintingPacket] {
  override val id = 4
	
  override def read(in: NiolInput): SpawnPaintingPacket = {
    val entityId = in.getVarint()
    val entityUuid = new UUID(in.getLong(), in.getLong())
    val title = in.getVarstring(UTF_8)
    val location = in.getLong()
    val direction = in.getByte()
    new SpawnPaintingPacket(entityId, entityUuid, title, location, direction)
  }
}
/** Packet builder auto-generated by DataTractor */
final class SpawnPaintingPacketBuilder[P <: SpawnPaintingPacket] extends PacketBuilder[SpawnPaintingPacket, P =:= Complete] {
  private[this] var entityId: Int = _
  private[this] var entityUuid: UUID = _
  private[this] var title: String = _
  private[this] var location: Long = _
  private[this] var direction: Byte = _

  def withEntityId(entityId: Int): SpawnPaintingPacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[SpawnPaintingPacketBuilder[P with EntityId]]
  }

  def withEntityUuid(entityUuid: UUID): SpawnPaintingPacketBuilder[P with EntityUuid] = {
    this.entityUuid = entityUuid
    this.asInstanceOf[SpawnPaintingPacketBuilder[P with EntityUuid]]
  }

  def withTitle(title: String): SpawnPaintingPacketBuilder[P with Title] = {
    this.title = title
    this.asInstanceOf[SpawnPaintingPacketBuilder[P with Title]]
  }

  def withLocation(location: Long): SpawnPaintingPacketBuilder[P with Location] = {
    this.location = location
    this.asInstanceOf[SpawnPaintingPacketBuilder[P with Location]]
  }

  def withLocation(v: Vec3i): SpawnPaintingPacketBuilder[P with Location] = {
    this.location = ((v.x & 0x3ffffff) << 38) | ((v.y & 0xfff) << 26) | (v.z & 0x3ffffff)
    this.asInstanceOf[SpawnPaintingPacketBuilder[P with Location]]
  }

  def withDirection(direction: Byte): SpawnPaintingPacketBuilder[P with Direction] = {
    this.direction = direction
    this.asInstanceOf[SpawnPaintingPacketBuilder[P with Direction]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new SpawnPaintingPacket(entityId, entityUuid, title, location, direction)
  }
}
object SpawnPaintingPacketBuilder {
  sealed trait EntityId
  sealed trait EntityUuid
  sealed trait Title
  sealed trait Location
  sealed trait Direction
  type Complete = SpawnPaintingPacket with EntityId with EntityUuid with Title with Location with Direction
}
