package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.craft.CraftAttach
import EntityEquipmentPacketBuilder._
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class EntityEquipmentPacket(var entityId: Int, var slot: Int, var item: AnyRef) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(entityId)
    out.putVarint(slot)
    // TODO write item
  }
	
  override def obj = EntityEquipmentPacket

	
}
object EntityEquipmentPacket extends PacketObj[CraftAttach, EntityEquipmentPacket] {
  override val id = 63
	
  override def read(in: NiolInput): EntityEquipmentPacket = {
    val entityId = in.getVarint()
    val slot = in.getVarint()
    // TODO read item
    new EntityEquipmentPacket(entityId, slot, null)
  }
}
/** Packet builder auto-generated by DataTractor */
final class EntityEquipmentPacketBuilder[P <: EntityEquipmentPacket] extends PacketBuilder[EntityEquipmentPacket, P =:= Complete] {
  private[this] var entityId: Int = _
  private[this] var slot: Int = _
  private[this] var item: AnyRef = _

  def withEntityId(entityId: Int): EntityEquipmentPacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[EntityEquipmentPacketBuilder[P with EntityId]]
  }

  def withSlot(slot: Int): EntityEquipmentPacketBuilder[P with Slot] = {
    this.slot = slot
    this.asInstanceOf[EntityEquipmentPacketBuilder[P with Slot]]
  }

  def withItem(item: AnyRef): EntityEquipmentPacketBuilder[P with Item] = {
    this.item = item
    this.asInstanceOf[EntityEquipmentPacketBuilder[P with Item]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new EntityEquipmentPacket(entityId, slot, item)
  }
}
object EntityEquipmentPacketBuilder {
  sealed trait EntityId
  sealed trait Slot
  sealed trait Item
  type Complete = EntityEquipmentPacket with EntityId with Slot with Item
}
