package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.craft.CraftAttach
import ParticlePacketBuilder._
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class ParticlePacket(var particleId: Int, var longDistance: Boolean, var x: Float, var y: Float, var z: Float, var offsetX: Float, var offsetY: Float, var offsetZ: Float, var particleData: Float, var data: Array[Int]) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putInt(particleId)
    out.putBool(longDistance)
    out.putFloat(x)
    out.putFloat(y)
    out.putFloat(z)
    out.putFloat(offsetX)
    out.putFloat(offsetY)
    out.putFloat(offsetZ)
    out.putFloat(particleData)
    out.putInt(data.length)
    var i_data = 0
    while (i_data < data.length) {
      out.putVarint(data(i_data))
      i_data += 1
    }
  }
	
  override def obj = ParticlePacket

	
}
object ParticlePacket extends PacketObj[CraftAttach, ParticlePacket] {
  override val id = 34
	
  override def read(in: NiolInput): ParticlePacket = {
    val particleId = in.getInt()
    val longDistance = in.getBool()
    val x = in.getFloat()
    val y = in.getFloat()
    val z = in.getFloat()
    val offsetX = in.getFloat()
    val offsetY = in.getFloat()
    val offsetZ = in.getFloat()
    val particleData = in.getFloat()
    val dataLength = in.getInt()
    var i_data = 0
    val data = new Array[Int](dataLength)
    while (i_data < dataLength) {
      data(i_data) = in.getVarint()
      i_data += 1
    }
    new ParticlePacket(particleId, longDistance, x, y, z, offsetX, offsetY, offsetZ, particleData, data)
  }
}
/** Packet builder auto-generated by DataTractor */
final class ParticlePacketBuilder[P <: ParticlePacket] extends PacketBuilder[ParticlePacket, P =:= Complete] {
  private[this] var particleId: Int = _
  private[this] var longDistance: Boolean = _
  private[this] var x: Float = _
  private[this] var y: Float = _
  private[this] var z: Float = _
  private[this] var offsetX: Float = _
  private[this] var offsetY: Float = _
  private[this] var offsetZ: Float = _
  private[this] var particleData: Float = _
  private[this] var data: Array[Int] = _

  def withParticleId(particleId: Int): ParticlePacketBuilder[P with ParticleId] = {
    this.particleId = particleId
    this.asInstanceOf[ParticlePacketBuilder[P with ParticleId]]
  }

  def withLongDistance(longDistance: Boolean): ParticlePacketBuilder[P with LongDistance] = {
    this.longDistance = longDistance
    this.asInstanceOf[ParticlePacketBuilder[P with LongDistance]]
  }

  def withX(x: Float): ParticlePacketBuilder[P with X] = {
    this.x = x
    this.asInstanceOf[ParticlePacketBuilder[P with X]]
  }

  def withY(y: Float): ParticlePacketBuilder[P with Y] = {
    this.y = y
    this.asInstanceOf[ParticlePacketBuilder[P with Y]]
  }

  def withZ(z: Float): ParticlePacketBuilder[P with Z] = {
    this.z = z
    this.asInstanceOf[ParticlePacketBuilder[P with Z]]
  }

  def withOffsetX(offsetX: Float): ParticlePacketBuilder[P with OffsetX] = {
    this.offsetX = offsetX
    this.asInstanceOf[ParticlePacketBuilder[P with OffsetX]]
  }

  def withOffsetY(offsetY: Float): ParticlePacketBuilder[P with OffsetY] = {
    this.offsetY = offsetY
    this.asInstanceOf[ParticlePacketBuilder[P with OffsetY]]
  }

  def withOffsetZ(offsetZ: Float): ParticlePacketBuilder[P with OffsetZ] = {
    this.offsetZ = offsetZ
    this.asInstanceOf[ParticlePacketBuilder[P with OffsetZ]]
  }

  def withParticleData(particleData: Float): ParticlePacketBuilder[P with ParticleData] = {
    this.particleData = particleData
    this.asInstanceOf[ParticlePacketBuilder[P with ParticleData]]
  }

  def withData(data: Array[Int]): ParticlePacketBuilder[P with Data] = {
    this.data = data
    this.asInstanceOf[ParticlePacketBuilder[P with Data]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new ParticlePacket(particleId, longDistance, x, y, z, offsetX, offsetY, offsetZ, particleData, data)
  }
}
object ParticlePacketBuilder {
  sealed trait ParticleId
  sealed trait LongDistance
  sealed trait X
  sealed trait Y
  sealed trait Z
  sealed trait OffsetX
  sealed trait OffsetY
  sealed trait OffsetZ
  sealed trait ParticleData
  sealed trait Data
  type Complete = ParticlePacket with ParticleId with LongDistance with X with Y with Z with OffsetX with OffsetY with OffsetZ with ParticleData with Data
}
