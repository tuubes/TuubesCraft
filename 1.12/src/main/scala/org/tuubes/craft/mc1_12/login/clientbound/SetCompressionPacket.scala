package org.tuubes.craft.mc1_12.login.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.core.network._
import org.tuubes.craft.CraftAttach
import SetCompressionPacketBuilder._

/** Packet class auto-generated by DataTractor */
final class SetCompressionPacket(var threshold: Int) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(threshold)
  }
	
  override def obj = SetCompressionPacket

	
}
object SetCompressionPacket extends PacketObj[CraftAttach, SetCompressionPacket] {
  override val id = 3
	
  override def read(in: NiolInput): SetCompressionPacket = {
    val threshold = in.getVarint()
    new SetCompressionPacket(threshold)
  }
}
/** Packet builder auto-generated by DataTractor */
final class SetCompressionPacketBuilder[P <: SetCompressionPacket] extends PacketBuilder[SetCompressionPacket, P =:= Complete] {
  private[this] var threshold: Int = _

  def withThreshold(threshold: Int): SetCompressionPacketBuilder[P with Threshold] = {
    this.threshold = threshold
    this.asInstanceOf[SetCompressionPacketBuilder[P with Threshold]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new SetCompressionPacket(threshold)
  }
}
object SetCompressionPacketBuilder {
  sealed trait Threshold
  type Complete = SetCompressionPacket with Threshold
}
