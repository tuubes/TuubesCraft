package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import java.nio.charset.StandardCharsets.UTF_8
import org.tuubes.network._

/** Packet class auto-generated by DataTractor */
final class UpdateScorePacket(var entityName: String, var action: Byte, var objectiveName: String, var value: Option[Int]) extends Packet {
  override def write(out: NiolOutput): Unit {
    out.putVarstring(entityName, UTF_8)
    out.putByte(action)
    out.putVarstring(objectiveName, UTF_8)
    if (value.isDefined) {
      out.putVarint(value)
    }
  }
	
  override def id = UpdateScorePacket.id

	
}
object UpdateScorePacket extends PacketObj[UpdateScorePacket] {
  override val id = 68
	
  override def read(in: NiolOutput): UpdateScorePacket {
    val entityName = in.getVarstring(UTF_8)
    val action = in.getByte()
    val objectiveName = in.getVarstring(UTF_8)
    // TODO read value
    new UpdateScorePacket(entityName, action, objectiveName, value)
  }
}
/** Packet builder auto-generated by DataTractor */
final class UpdateScorePacketBuilder[P <: UpdateScorePacket] extends PacketBuilder[UpdateScorePacket, Complete] {
  private[this] var entityName: String = _
  private[this] var action: Byte = _
  private[this] var objectiveName: String = _
  private[this] var value: Option[Int] = _

  def withEntityName(entityName: String): UpdateScorePacketBuilder[P with EntityName] = {
    this.entityName = entityName
    this.asInstanceOf[UpdateScorePacketBuilder[P with EntityName]]
  }

  def withAction(action: Byte): UpdateScorePacketBuilder[P with Action] = {
    this.action = action
    this.asInstanceOf[UpdateScorePacketBuilder[P with Action]]
  }

  def withObjectiveName(objectiveName: String): UpdateScorePacketBuilder[P with ObjectiveName] = {
    this.objectiveName = objectiveName
    this.asInstanceOf[UpdateScorePacketBuilder[P with ObjectiveName]]
  }

  def withValue(value: Option[Int]): UpdateScorePacketBuilder[P with Value] = {
    this.value = value
    this.asInstanceOf[UpdateScorePacketBuilder[P with Value]]
  }

  override def build()(implicit evidence: P =:= Complete) {
    new UpdateScorePacket(entityName, action, objectiveName, value)
  }
}
object UpdateScorePacketBuilder {
  sealed trait EntityName
  sealed trait Action
  sealed trait ObjectiveName
  sealed trait Value
  type Complete = UpdateScorePacketBuilder with EntityName with Action with ObjectiveName with Value
}
