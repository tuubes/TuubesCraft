package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.core.network._
import org.tuubes.craft.CraftAttach
import EntityRelativeMovePacketBuilder._

/** Packet class auto-generated by DataTractor */
final class EntityRelativeMovePacket(var entityId: Int, var deltaX: Short, var deltaY: Short, var deltaZ: Short, var onGround: Boolean) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(entityId)
    out.putShort(deltaX)
    out.putShort(deltaY)
    out.putShort(deltaZ)
    out.putBoolean(onGround)
  }
	
  override def obj = EntityRelativeMovePacket

	
}
object EntityRelativeMovePacket extends PacketObj[CraftAttach, EntityRelativeMovePacket] {
  override val id = 38
	
  override def read(in: NiolInput): EntityRelativeMovePacket = {
    val entityId = in.getVarint()
    val deltaX = in.getShort()
    val deltaY = in.getShort()
    val deltaZ = in.getShort()
    val onGround = in.getBoolean()
    new EntityRelativeMovePacket(entityId, deltaX, deltaY, deltaZ, onGround)
  }
}
/** Packet builder auto-generated by DataTractor */
final class EntityRelativeMovePacketBuilder[P <: EntityRelativeMovePacket] extends PacketBuilder[EntityRelativeMovePacket, P =:= Complete] {
  private[this] var entityId: Int = _
  private[this] var deltaX: Short = _
  private[this] var deltaY: Short = _
  private[this] var deltaZ: Short = _
  private[this] var onGround: Boolean = _

  def withEntityId(entityId: Int): EntityRelativeMovePacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[EntityRelativeMovePacketBuilder[P with EntityId]]
  }

  def withDeltaX(deltaX: Short): EntityRelativeMovePacketBuilder[P with DeltaX] = {
    this.deltaX = deltaX
    this.asInstanceOf[EntityRelativeMovePacketBuilder[P with DeltaX]]
  }

  def withDeltaY(deltaY: Short): EntityRelativeMovePacketBuilder[P with DeltaY] = {
    this.deltaY = deltaY
    this.asInstanceOf[EntityRelativeMovePacketBuilder[P with DeltaY]]
  }

  def withDeltaZ(deltaZ: Short): EntityRelativeMovePacketBuilder[P with DeltaZ] = {
    this.deltaZ = deltaZ
    this.asInstanceOf[EntityRelativeMovePacketBuilder[P with DeltaZ]]
  }

  def withOnGround(onGround: Boolean): EntityRelativeMovePacketBuilder[P with OnGround] = {
    this.onGround = onGround
    this.asInstanceOf[EntityRelativeMovePacketBuilder[P with OnGround]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new EntityRelativeMovePacket(entityId, deltaX, deltaY, deltaZ, onGround)
  }
}
object EntityRelativeMovePacketBuilder {
  sealed trait EntityId
  sealed trait DeltaX
  sealed trait DeltaY
  sealed trait DeltaZ
  sealed trait OnGround
  type Complete = EntityRelativeMovePacket with EntityId with DeltaX with DeltaY with DeltaZ with OnGround
}
