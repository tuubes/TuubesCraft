package org.tuubes.craft.mc1_12.play.serverbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import CraftingBookDataPacketBuilder._
import org.tuubes.craft.CraftAttach
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class CraftingBookDataPacket(var `type`: Int, var recipeId: Int, var craftingBookOpen: Boolean, var craftingFilter: Boolean) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(`type`)
    out.putInt(recipeId)
    out.putBool(craftingBookOpen)
    out.putBool(craftingFilter)
  }
	
  override def obj = CraftingBookDataPacket

	
}
object CraftingBookDataPacket extends PacketObj[CraftAttach, CraftingBookDataPacket] {
  override val id = 23
	
  override def read(in: NiolInput): CraftingBookDataPacket = {
    val `type` = in.getVarint()
    val recipeId = in.getInt()
    val craftingBookOpen = in.getBool()
    val craftingFilter = in.getBool()
    new CraftingBookDataPacket(`type`, recipeId, craftingBookOpen, craftingFilter)
  }
}
/** Packet builder auto-generated by DataTractor */
final class CraftingBookDataPacketBuilder[P <: CraftingBookDataPacket] extends PacketBuilder[CraftingBookDataPacket, P =:= Complete] {
  private[this] var `type`: Int = _
  private[this] var recipeId: Int = _
  private[this] var craftingBookOpen: Boolean = _
  private[this] var craftingFilter: Boolean = _

  def withType(`type`: Int): CraftingBookDataPacketBuilder[P with Type] = {
    this.`type` = `type`
    this.asInstanceOf[CraftingBookDataPacketBuilder[P with Type]]
  }

  def withRecipeId(recipeId: Int): CraftingBookDataPacketBuilder[P with RecipeId] = {
    this.recipeId = recipeId
    this.asInstanceOf[CraftingBookDataPacketBuilder[P with RecipeId]]
  }

  def withCraftingBookOpen(craftingBookOpen: Boolean): CraftingBookDataPacketBuilder[P with CraftingBookOpen] = {
    this.craftingBookOpen = craftingBookOpen
    this.asInstanceOf[CraftingBookDataPacketBuilder[P with CraftingBookOpen]]
  }

  def withCraftingFilter(craftingFilter: Boolean): CraftingBookDataPacketBuilder[P with CraftingFilter] = {
    this.craftingFilter = craftingFilter
    this.asInstanceOf[CraftingBookDataPacketBuilder[P with CraftingFilter]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new CraftingBookDataPacket(`type`, recipeId, craftingBookOpen, craftingFilter)
  }
}
object CraftingBookDataPacketBuilder {
  sealed trait Type
  sealed trait RecipeId
  sealed trait CraftingBookOpen
  sealed trait CraftingFilter
  type Complete = CraftingBookDataPacket with Type with RecipeId with CraftingBookOpen with CraftingFilter
}
