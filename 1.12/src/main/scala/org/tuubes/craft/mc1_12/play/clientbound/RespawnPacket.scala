package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.craft.CraftAttach
import RespawnPacketBuilder._
import java.nio.charset.StandardCharsets.UTF_8
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class RespawnPacket(var dimension: Int, var difficulty: Int, var gamemode: Int, var levelType: String) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putInt(dimension)
    out.putInt(difficulty)
    out.putInt(gamemode)
    out.putVarstring(levelType, UTF_8)
  }
	
  override def obj = RespawnPacket

	
}
object RespawnPacket extends PacketObj[CraftAttach, RespawnPacket] {
  override val id = 52
	
  override def read(in: NiolInput): RespawnPacket = {
    val dimension = in.getInt()
    val difficulty = in.getUnsignedByte()
    val gamemode = in.getUnsignedByte()
    val levelType = in.getVarstring(UTF_8)
    new RespawnPacket(dimension, difficulty, gamemode, levelType)
  }
}
/** Packet builder auto-generated by DataTractor */
final class RespawnPacketBuilder[P <: RespawnPacket] extends PacketBuilder[RespawnPacket, P =:= Complete] {
  private[this] var dimension: Int = _
  private[this] var difficulty: Int = _
  private[this] var gamemode: Int = _
  private[this] var levelType: String = _

  def withDimension(dimension: Int): RespawnPacketBuilder[P with Dimension] = {
    this.dimension = dimension
    this.asInstanceOf[RespawnPacketBuilder[P with Dimension]]
  }

  def withDifficulty(difficulty: Int): RespawnPacketBuilder[P with Difficulty] = {
    this.difficulty = difficulty
    this.asInstanceOf[RespawnPacketBuilder[P with Difficulty]]
  }

  def withGamemode(gamemode: Int): RespawnPacketBuilder[P with Gamemode] = {
    this.gamemode = gamemode
    this.asInstanceOf[RespawnPacketBuilder[P with Gamemode]]
  }

  def withLevelType(levelType: String): RespawnPacketBuilder[P with LevelType] = {
    this.levelType = levelType
    this.asInstanceOf[RespawnPacketBuilder[P with LevelType]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new RespawnPacket(dimension, difficulty, gamemode, levelType)
  }
}
object RespawnPacketBuilder {
  sealed trait Dimension
  sealed trait Difficulty
  sealed trait Gamemode
  sealed trait LevelType
  type Complete = RespawnPacket with Dimension with Difficulty with Gamemode with LevelType
}
