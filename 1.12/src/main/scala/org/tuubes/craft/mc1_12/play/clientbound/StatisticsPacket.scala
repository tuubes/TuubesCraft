package org.tuubes.craft.mc1_12.play.clientbound

import StatisticsPacketBuilder._
import com.electronwill.niol.{NiolInput, NiolOutput}
import java.nio.charset.StandardCharsets.UTF_8
import org.tuubes.core.network._
import org.tuubes.craft.CraftAttach

/** Packet class auto-generated by DataTractor */
final class StatisticsPacket(var count: Int, var name: String, var value: Int) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(count)
    out.putVarstring(name, UTF_8)
    out.putVarint(value)
  }
	
  override def obj = StatisticsPacket

	
}
object StatisticsPacket extends PacketObj[CraftAttach, StatisticsPacket] {
  override val id = 7
	
  override def read(in: NiolInput): StatisticsPacket = {
    val count = in.getVarint()
    val name = in.getVarstring(UTF_8)
    val value = in.getVarint()
    new StatisticsPacket(count, name, value)
  }
}
/** Packet builder auto-generated by DataTractor */
final class StatisticsPacketBuilder[P <: StatisticsPacket] extends PacketBuilder[StatisticsPacket, P =:= Complete] {
  private[this] var count: Int = _
  private[this] var name: String = _
  private[this] var value: Int = _

  def withCount(count: Int): StatisticsPacketBuilder[P with Count] = {
    this.count = count
    this.asInstanceOf[StatisticsPacketBuilder[P with Count]]
  }

  def withName(name: String): StatisticsPacketBuilder[P with Name] = {
    this.name = name
    this.asInstanceOf[StatisticsPacketBuilder[P with Name]]
  }

  def withValue(value: Int): StatisticsPacketBuilder[P with Value] = {
    this.value = value
    this.asInstanceOf[StatisticsPacketBuilder[P with Value]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new StatisticsPacket(count, name, value)
  }
}
object StatisticsPacketBuilder {
  sealed trait Count
  sealed trait Name
  sealed trait Value
  type Complete = StatisticsPacket with Count with Name with Value
}
