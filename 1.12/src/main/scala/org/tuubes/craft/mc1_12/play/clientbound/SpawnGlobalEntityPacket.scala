package org.tuubes.craft.mc1_12.play.clientbound

import org.tuubes.network._
import com.electronwill.niol.{NiolInput, NiolOutput}

/** Packet class auto-generated by DataTractor */
final class SpawnGlobalEntityPacket(var entityId: Int, var `type`: Byte, var x: Double, var y: Double, var z: Double) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(entityId)
    out.putByte(`type`)
    out.putDouble(x)
    out.putDouble(y)
    out.putDouble(z)
  }
	
  override def obj = SpawnGlobalEntityPacket

	
}
object SpawnGlobalEntityPacket extends PacketObj[SpawnGlobalEntityPacket] {
  override val id = 2
	
  override def read(in: NiolOutput): SpawnGlobalEntityPacket = {
    val entityId = in.getVarint()
    val `type` = in.getByte()
    val x = in.getDouble()
    val y = in.getDouble()
    val z = in.getDouble()
    new SpawnGlobalEntityPacket(entityId, `type`, x, y, z)
  }
}
/** Packet builder auto-generated by DataTractor */
final class SpawnGlobalEntityPacketBuilder[P <: SpawnGlobalEntityPacket] extends PacketBuilder[SpawnGlobalEntityPacket, Complete] {
  private[this] var entityId: Int = _
  private[this] var `type`: Byte = _
  private[this] var x: Double = _
  private[this] var y: Double = _
  private[this] var z: Double = _

  def withEntityId(entityId: Int): SpawnGlobalEntityPacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[SpawnGlobalEntityPacketBuilder[P with EntityId]]
  }

  def withType(`type`: Byte): SpawnGlobalEntityPacketBuilder[P with Type] = {
    this.`type` = `type`
    this.asInstanceOf[SpawnGlobalEntityPacketBuilder[P with Type]]
  }

  def withX(x: Double): SpawnGlobalEntityPacketBuilder[P with X] = {
    this.x = x
    this.asInstanceOf[SpawnGlobalEntityPacketBuilder[P with X]]
  }

  def withY(y: Double): SpawnGlobalEntityPacketBuilder[P with Y] = {
    this.y = y
    this.asInstanceOf[SpawnGlobalEntityPacketBuilder[P with Y]]
  }

  def withZ(z: Double): SpawnGlobalEntityPacketBuilder[P with Z] = {
    this.z = z
    this.asInstanceOf[SpawnGlobalEntityPacketBuilder[P with Z]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new SpawnGlobalEntityPacket(entityId, `type`, x, y, z)
  }
}
object SpawnGlobalEntityPacketBuilder {
  sealed trait EntityId
  sealed trait Type
  sealed trait X
  sealed trait Y
  sealed trait Z
  type Complete = SpawnGlobalEntityPacketBuilder with EntityId with Type with X with Y with Z
}
