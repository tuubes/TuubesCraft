package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import java.nio.charset.StandardCharsets.UTF_8
import org.tuubes.core.network._
import org.tuubes.craft.CraftAttach
import OpenWindowPacketBuilder._

/** Packet class auto-generated by DataTractor */
final class OpenWindowPacket(var windowId: Int, var windowType: String, var windowTitle: String, var numberOfSlots: Int, var entityId: Option[Int]) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putInt(windowId)
    out.putVarstring(windowType, UTF_8)
    out.putVarstring(windowTitle, UTF_8)
    out.putInt(numberOfSlots)
    if (entityId.isDefined) {
      out.putInt(entityId.get)
    }
  }
	
  override def obj = OpenWindowPacket

	
}
object OpenWindowPacket extends PacketObj[CraftAttach, OpenWindowPacket] {
  override val id = 19
	
  override def read(in: NiolInput): OpenWindowPacket = {
    val windowId = in.getUnsignedByte()
    val windowType = in.getVarstring(UTF_8)
    val windowTitle = in.getVarstring(UTF_8)
    val numberOfSlots = in.getUnsignedByte()
    // TODO read entityId
    val entityId = Some(-1)
    new OpenWindowPacket(windowId, windowType, windowTitle, numberOfSlots, entityId)
  }
}
/** Packet builder auto-generated by DataTractor */
final class OpenWindowPacketBuilder[P <: OpenWindowPacket] extends PacketBuilder[OpenWindowPacket, P =:= Complete] {
  private[this] var windowId: Int = _
  private[this] var windowType: String = _
  private[this] var windowTitle: String = _
  private[this] var numberOfSlots: Int = _
  private[this] var entityId: Option[Int] = _

  def withWindowId(windowId: Int): OpenWindowPacketBuilder[P with WindowId] = {
    this.windowId = windowId
    this.asInstanceOf[OpenWindowPacketBuilder[P with WindowId]]
  }

  def withWindowType(windowType: String): OpenWindowPacketBuilder[P with WindowType] = {
    this.windowType = windowType
    this.asInstanceOf[OpenWindowPacketBuilder[P with WindowType]]
  }

  def withWindowTitle(windowTitle: String): OpenWindowPacketBuilder[P with WindowTitle] = {
    this.windowTitle = windowTitle
    this.asInstanceOf[OpenWindowPacketBuilder[P with WindowTitle]]
  }

  def withNumberOfSlots(numberOfSlots: Int): OpenWindowPacketBuilder[P with NumberOfSlots] = {
    this.numberOfSlots = numberOfSlots
    this.asInstanceOf[OpenWindowPacketBuilder[P with NumberOfSlots]]
  }

  def withEntityId(entityId: Option[Int]): OpenWindowPacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[OpenWindowPacketBuilder[P with EntityId]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new OpenWindowPacket(windowId, windowType, windowTitle, numberOfSlots, entityId)
  }
}
object OpenWindowPacketBuilder {
  sealed trait WindowId
  sealed trait WindowType
  sealed trait WindowTitle
  sealed trait NumberOfSlots
  sealed trait EntityId
  type Complete = OpenWindowPacket with WindowId with WindowType with WindowTitle with NumberOfSlots with EntityId
}
