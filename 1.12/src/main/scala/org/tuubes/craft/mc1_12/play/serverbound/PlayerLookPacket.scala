package org.tuubes.craft.mc1_12.play.serverbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.network._

/** Packet class auto-generated by DataTractor */
final class PlayerLookPacket(var yaw: Float, var pitch: Float, var onGround: Boolean) extends Packet {
  override def write(out: NiolOutput): Unit {
    out.putFloat(yaw)
    out.putFloat(pitch)
    out.putBoolean(onGround)
  }
	
  override def id = PlayerLookPacket.id

	
}
object PlayerLookPacket extends PacketObj[PlayerLookPacket] {
  override val id = 16
	
  override def read(in: NiolOutput): PlayerLookPacket {
    val yaw = in.getFloat()
    val pitch = in.getFloat()
    val onGround = in.getBoolean()
    new PlayerLookPacket(yaw, pitch, onGround)
  }
}
/** Packet builder auto-generated by DataTractor */
final class PlayerLookPacketBuilder[P <: PlayerLookPacket] extends PacketBuilder[PlayerLookPacket, Complete] {
  private[this] var yaw: Float = _
  private[this] var pitch: Float = _
  private[this] var onGround: Boolean = _

  def withYaw(yaw: Float): PlayerLookPacketBuilder[P with Yaw] = {
    this.yaw = yaw
    this.asInstanceOf[PlayerLookPacketBuilder[P with Yaw]]
  }

  def withPitch(pitch: Float): PlayerLookPacketBuilder[P with Pitch] = {
    this.pitch = pitch
    this.asInstanceOf[PlayerLookPacketBuilder[P with Pitch]]
  }

  def withOnGround(onGround: Boolean): PlayerLookPacketBuilder[P with OnGround] = {
    this.onGround = onGround
    this.asInstanceOf[PlayerLookPacketBuilder[P with OnGround]]
  }

  override def build()(implicit evidence: P =:= Complete) {
    new PlayerLookPacket(yaw, pitch, onGround)
  }
}
object PlayerLookPacketBuilder {
  sealed trait Yaw
  sealed trait Pitch
  sealed trait OnGround
  type Complete = PlayerLookPacketBuilder with Yaw with Pitch with OnGround
}
