package org.tuubes.craft.mc1_12.play.clientbound

import org.tuubes.network._
import com.electronwill.niol.{NiolInput, NiolOutput}
import com.electronwill.utils.Vec3i

/** Packet class auto-generated by DataTractor */
final class BlockActionPacket(var location: Long, var actionIdByte1: Int, var actionParamByte2: Int, var blockType: Int) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putLong(location)
    out.putInt(actionIdByte1)
    out.putInt(actionParamByte2)
    out.putVarint(blockType)
  }
	
  override def obj = BlockActionPacket

  def vecLocation: Vec3i = {
    val x = location >> 38
    val y = (location >> 26) & 0xfff
    val z = location << 38 >> 38
    new Vec3i(x, y, z)
  }	
}
object BlockActionPacket extends PacketObj[BlockActionPacket] {
  override val id = 10
	
  override def read(in: NiolOutput): BlockActionPacket = {
    val location = in.getLong()
    val actionIdByte1 = in.getUnsignedByte()
    val actionParamByte2 = in.getUnsignedByte()
    val blockType = in.getVarint()
    new BlockActionPacket(location, actionIdByte1, actionParamByte2, blockType)
  }
}
/** Packet builder auto-generated by DataTractor */
final class BlockActionPacketBuilder[P <: BlockActionPacket] extends PacketBuilder[BlockActionPacket, Complete] {
  private[this] var location: Long = _
  private[this] var actionIdByte1: Int = _
  private[this] var actionParamByte2: Int = _
  private[this] var blockType: Int = _

  def withLocation(location: Long): BlockActionPacketBuilder[P with Location] = {
    this.location = location
    this.asInstanceOf[BlockActionPacketBuilder[P with Location]]
  }

  def withLocation(v: Vec3i): BlockActionPacketBuilder[P with Location] = {
    this.location = ((v.x & 0x3ffffff) << 38) | ((v.y & 0xfff) << 26) | (v.z & 0x3ffffff)
    this.asInstanceOf[BlockActionPacketBuilder[P with Location]]
  }

  def withActionIdByte1(actionIdByte1: Int): BlockActionPacketBuilder[P with ActionIdByte1] = {
    this.actionIdByte1 = actionIdByte1
    this.asInstanceOf[BlockActionPacketBuilder[P with ActionIdByte1]]
  }

  def withActionParamByte2(actionParamByte2: Int): BlockActionPacketBuilder[P with ActionParamByte2] = {
    this.actionParamByte2 = actionParamByte2
    this.asInstanceOf[BlockActionPacketBuilder[P with ActionParamByte2]]
  }

  def withBlockType(blockType: Int): BlockActionPacketBuilder[P with BlockType] = {
    this.blockType = blockType
    this.asInstanceOf[BlockActionPacketBuilder[P with BlockType]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new BlockActionPacket(location, actionIdByte1, actionParamByte2, blockType)
  }
}
object BlockActionPacketBuilder {
  sealed trait Location
  sealed trait ActionIdByte1
  sealed trait ActionParamByte2
  sealed trait BlockType
  type Complete = BlockActionPacketBuilder with Location with ActionIdByte1 with ActionParamByte2 with BlockType
}
