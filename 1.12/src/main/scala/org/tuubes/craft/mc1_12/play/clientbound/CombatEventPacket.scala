package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import java.nio.charset.StandardCharsets.UTF_8
import org.tuubes.core.network._
import CombatEventPacketBuilder._
import org.tuubes.craft.CraftAttach

/** Packet class auto-generated by DataTractor */
final class CombatEventPacket(var event: Int, var noFields: Nothing, var duration: Int, var entityId: Int, var playerId: Int, var entityId: Int, var message: String) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(event)
    // TODO write noFields
    out.putVarint(duration)
    out.putInt(entityId)
    out.putVarint(playerId)
    out.putInt(entityId)
    out.putVarstring(message, UTF_8)
  }
	
  override def obj = CombatEventPacket

	
}
object CombatEventPacket extends PacketObj[CraftAttach, CombatEventPacket] {
  override val id = 45
	
  override def read(in: NiolInput): CombatEventPacket = {
    val event = in.getVarint()
    // TODO read noFields
    val duration = in.getVarint()
    val entityId = in.getInt()
    val playerId = in.getVarint()
    val entityId = in.getInt()
    val message = in.getVarstring(UTF_8)
    new CombatEventPacket(event, noFields, duration, entityId, playerId, entityId, message)
  }
}
/** Packet builder auto-generated by DataTractor */
final class CombatEventPacketBuilder[P <: CombatEventPacket] extends PacketBuilder[CombatEventPacket, P =:= Complete] {
  private[this] var event: Int = _
  private[this] var noFields: Nothing = _
  private[this] var duration: Int = _
  private[this] var entityId: Int = _
  private[this] var playerId: Int = _
  private[this] var entityId: Int = _
  private[this] var message: String = _

  def withEvent(event: Int): CombatEventPacketBuilder[P with Event] = {
    this.event = event
    this.asInstanceOf[CombatEventPacketBuilder[P with Event]]
  }

  def withNoFields(noFields: Nothing): CombatEventPacketBuilder[P with NoFields] = {
    this.noFields = noFields
    this.asInstanceOf[CombatEventPacketBuilder[P with NoFields]]
  }

  def withDuration(duration: Int): CombatEventPacketBuilder[P with Duration] = {
    this.duration = duration
    this.asInstanceOf[CombatEventPacketBuilder[P with Duration]]
  }

  def withEntityId(entityId: Int): CombatEventPacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[CombatEventPacketBuilder[P with EntityId]]
  }

  def withPlayerId(playerId: Int): CombatEventPacketBuilder[P with PlayerId] = {
    this.playerId = playerId
    this.asInstanceOf[CombatEventPacketBuilder[P with PlayerId]]
  }

  def withEntityId(entityId: Int): CombatEventPacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[CombatEventPacketBuilder[P with EntityId]]
  }

  def withMessage(message: String): CombatEventPacketBuilder[P with Message] = {
    this.message = message
    this.asInstanceOf[CombatEventPacketBuilder[P with Message]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new CombatEventPacket(event, noFields, duration, entityId, playerId, entityId, message)
  }
}
object CombatEventPacketBuilder {
  sealed trait Event
  sealed trait NoFields
  sealed trait Duration
  sealed trait EntityId
  sealed trait PlayerId
  sealed trait EntityId
  sealed trait Message
  type Complete = CombatEventPacket with Event with NoFields with Duration with EntityId with PlayerId with EntityId with Message
}
