package org.tuubes.craft.mc1_12.handshaking.serverbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.craft.CraftAttach
import java.nio.charset.StandardCharsets.UTF_8
import org.tuubes.core.network._
import HandshakePacketBuilder._

/** Packet class auto-generated by DataTractor */
final class HandshakePacket(var protocolVersion: Int, var serverAddress: String, var serverPort: Int, var nextState: Int) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(protocolVersion)
    out.putVarstring(serverAddress, UTF_8)
    out.putInt(serverPort)
    out.putVarint(nextState)
  }
	
  override def obj = HandshakePacket

	
}
object HandshakePacket extends PacketObj[CraftAttach, HandshakePacket] {
  override val id = 0
	
  override def read(in: NiolInput): HandshakePacket = {
    val protocolVersion = in.getVarint()
    val serverAddress = in.getVarstring(UTF_8)
    val serverPort = in.getUnsignedShort()
    val nextState = in.getVarint()
    new HandshakePacket(protocolVersion, serverAddress, serverPort, nextState)
  }
}
/** Packet builder auto-generated by DataTractor */
final class HandshakePacketBuilder[P <: HandshakePacket] extends PacketBuilder[HandshakePacket, P =:= Complete] {
  private[this] var protocolVersion: Int = _
  private[this] var serverAddress: String = _
  private[this] var serverPort: Int = _
  private[this] var nextState: Int = _

  def withProtocolVersion(protocolVersion: Int): HandshakePacketBuilder[P with ProtocolVersion] = {
    this.protocolVersion = protocolVersion
    this.asInstanceOf[HandshakePacketBuilder[P with ProtocolVersion]]
  }

  def withServerAddress(serverAddress: String): HandshakePacketBuilder[P with ServerAddress] = {
    this.serverAddress = serverAddress
    this.asInstanceOf[HandshakePacketBuilder[P with ServerAddress]]
  }

  def withServerPort(serverPort: Int): HandshakePacketBuilder[P with ServerPort] = {
    this.serverPort = serverPort
    this.asInstanceOf[HandshakePacketBuilder[P with ServerPort]]
  }

  def withNextState(nextState: Int): HandshakePacketBuilder[P with NextState] = {
    this.nextState = nextState
    this.asInstanceOf[HandshakePacketBuilder[P with NextState]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new HandshakePacket(protocolVersion, serverAddress, serverPort, nextState)
  }
}
object HandshakePacketBuilder {
  sealed trait ProtocolVersion
  sealed trait ServerAddress
  sealed trait ServerPort
  sealed trait NextState
  type Complete = HandshakePacket with ProtocolVersion with ServerAddress with ServerPort with NextState
}
