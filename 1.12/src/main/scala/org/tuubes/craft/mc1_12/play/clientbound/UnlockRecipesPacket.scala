package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.core.network._
import org.tuubes.craft.CraftAttach
import UnlockRecipesPacketBuilder._

/** Packet class auto-generated by DataTractor */
final class UnlockRecipesPacket(var action: Int, var craftingBookOpen: Boolean, var filteringCraftable: Boolean, var recipeIds: Array[Int], var arraySize2: Option[Int], var recipeIds: Option[Array[???]]) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(action)
    out.putBoolean(craftingBookOpen)
    out.putBoolean(filteringCraftable)
    out.putVarint(recipeIds.length)
    var i_recipeIds = 0
    while (i_recipeIds < recipeIds.length) {
      out.putVarint(recipeIds(i_recipeIds))
      i_recipeIds += 1
    }
    if (arraySize2.isDefined) {
      out.putVarint(arraySize2)
    }
    if (recipeIds.isDefined) {
      var i_recipeIds = 0
    while (i_recipeIds < recipeIds.length) {
      // TODO write recipeIds(i_recipeIds)
      i_recipeIds += 1
    }
    }
  }
	
  override def obj = UnlockRecipesPacket

	
}
object UnlockRecipesPacket extends PacketObj[CraftAttach, UnlockRecipesPacket] {
  override val id = 48
	
  override def read(in: NiolInput): UnlockRecipesPacket = {
    val action = in.getVarint()
    val craftingBookOpen = in.getBoolean()
    val filteringCraftable = in.getBoolean()
    val recipeIdsLength = in.getVarint()
    var i_recipeIds = 0
    val recipeIds = new Array[Int](recipeIdsLength)
    while (i_recipeIds < recipeIdsLength) {
      recipeIds(i_recipeIds) = in.getVarint()
      i_recipeIds += 1
    }
    // TODO read arraySize2
    // TODO read recipeIds
    new UnlockRecipesPacket(action, craftingBookOpen, filteringCraftable, recipeIds, arraySize2, recipeIds)
  }
}
/** Packet builder auto-generated by DataTractor */
final class UnlockRecipesPacketBuilder[P <: UnlockRecipesPacket] extends PacketBuilder[UnlockRecipesPacket, P =:= Complete] {
  private[this] var action: Int = _
  private[this] var craftingBookOpen: Boolean = _
  private[this] var filteringCraftable: Boolean = _
  private[this] var recipeIds: Array[Int] = _
  private[this] var arraySize2: Option[Int] = _
  private[this] var recipeIds: Option[Array[???]] = _

  def withAction(action: Int): UnlockRecipesPacketBuilder[P with Action] = {
    this.action = action
    this.asInstanceOf[UnlockRecipesPacketBuilder[P with Action]]
  }

  def withCraftingBookOpen(craftingBookOpen: Boolean): UnlockRecipesPacketBuilder[P with CraftingBookOpen] = {
    this.craftingBookOpen = craftingBookOpen
    this.asInstanceOf[UnlockRecipesPacketBuilder[P with CraftingBookOpen]]
  }

  def withFilteringCraftable(filteringCraftable: Boolean): UnlockRecipesPacketBuilder[P with FilteringCraftable] = {
    this.filteringCraftable = filteringCraftable
    this.asInstanceOf[UnlockRecipesPacketBuilder[P with FilteringCraftable]]
  }

  def withRecipeIds(recipeIds: Array[Int]): UnlockRecipesPacketBuilder[P with RecipeIds] = {
    this.recipeIds = recipeIds
    this.asInstanceOf[UnlockRecipesPacketBuilder[P with RecipeIds]]
  }

  def withArraySize2(arraySize2: Option[Int]): UnlockRecipesPacketBuilder[P with ArraySize2] = {
    this.arraySize2 = arraySize2
    this.asInstanceOf[UnlockRecipesPacketBuilder[P with ArraySize2]]
  }

  def withRecipeIds(recipeIds: Option[Array[???]]): UnlockRecipesPacketBuilder[P with RecipeIds] = {
    this.recipeIds = recipeIds
    this.asInstanceOf[UnlockRecipesPacketBuilder[P with RecipeIds]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new UnlockRecipesPacket(action, craftingBookOpen, filteringCraftable, recipeIds, arraySize2, recipeIds)
  }
}
object UnlockRecipesPacketBuilder {
  sealed trait Action
  sealed trait CraftingBookOpen
  sealed trait FilteringCraftable
  sealed trait RecipeIds
  sealed trait ArraySize2
  sealed trait RecipeIds
  type Complete = UnlockRecipesPacket with Action with CraftingBookOpen with FilteringCraftable with RecipeIds with ArraySize2 with RecipeIds
}
