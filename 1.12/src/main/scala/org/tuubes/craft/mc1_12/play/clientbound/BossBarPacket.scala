package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.craft.CraftAttach
import java.nio.charset.StandardCharsets.UTF_8
import java.util.UUID
import BossBarPacketBuilder._
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class BossBarPacket(var uuid: UUID, var action: Int, var title: String, var health: Float, var color: Int, var division: Int, var flags: Int, var noFields: Nothing, var health: Float, var title: String, var color: Int, var dividers: Int, var flags: Int) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putLong(uuid.getMostSignificantBits); out.putLong(uuid.getLeastSignificantBits)
    out.putVarint(action)
    out.putVarstring(title, UTF_8)
    out.putFloat(health)
    out.putVarint(color)
    out.putVarint(division)
    out.putInt(flags)
    // TODO write noFields
    out.putFloat(health)
    out.putVarstring(title, UTF_8)
    out.putVarint(color)
    out.putVarint(dividers)
    out.putInt(flags)
  }
	
  override def obj = BossBarPacket

	
}
object BossBarPacket extends PacketObj[CraftAttach, BossBarPacket] {
  override val id = 12
	
  override def read(in: NiolInput): BossBarPacket = {
    val uuid = new UUID(in.getLong(), in.getLong())
    val action = in.getVarint()
    val title = in.getVarstring(UTF_8)
    val health = in.getFloat()
    val color = in.getVarint()
    val division = in.getVarint()
    val flags = in.getUnsignedByte()
    // TODO read noFields
    val health = in.getFloat()
    val title = in.getVarstring(UTF_8)
    val color = in.getVarint()
    val dividers = in.getVarint()
    val flags = in.getUnsignedByte()
    new BossBarPacket(uuid, action, title, health, color, division, flags, noFields, health, title, color, dividers, flags)
  }
}
/** Packet builder auto-generated by DataTractor */
final class BossBarPacketBuilder[P <: BossBarPacket] extends PacketBuilder[BossBarPacket, P =:= Complete] {
  private[this] var uuid: UUID = _
  private[this] var action: Int = _
  private[this] var title: String = _
  private[this] var health: Float = _
  private[this] var color: Int = _
  private[this] var division: Int = _
  private[this] var flags: Int = _
  private[this] var noFields: Nothing = _
  private[this] var health: Float = _
  private[this] var title: String = _
  private[this] var color: Int = _
  private[this] var dividers: Int = _
  private[this] var flags: Int = _

  def withUuid(uuid: UUID): BossBarPacketBuilder[P with Uuid] = {
    this.uuid = uuid
    this.asInstanceOf[BossBarPacketBuilder[P with Uuid]]
  }

  def withAction(action: Int): BossBarPacketBuilder[P with Action] = {
    this.action = action
    this.asInstanceOf[BossBarPacketBuilder[P with Action]]
  }

  def withTitle(title: String): BossBarPacketBuilder[P with Title] = {
    this.title = title
    this.asInstanceOf[BossBarPacketBuilder[P with Title]]
  }

  def withHealth(health: Float): BossBarPacketBuilder[P with Health] = {
    this.health = health
    this.asInstanceOf[BossBarPacketBuilder[P with Health]]
  }

  def withColor(color: Int): BossBarPacketBuilder[P with Color] = {
    this.color = color
    this.asInstanceOf[BossBarPacketBuilder[P with Color]]
  }

  def withDivision(division: Int): BossBarPacketBuilder[P with Division] = {
    this.division = division
    this.asInstanceOf[BossBarPacketBuilder[P with Division]]
  }

  def withFlags(flags: Int): BossBarPacketBuilder[P with Flags] = {
    this.flags = flags
    this.asInstanceOf[BossBarPacketBuilder[P with Flags]]
  }

  def withNoFields(noFields: Nothing): BossBarPacketBuilder[P with NoFields] = {
    this.noFields = noFields
    this.asInstanceOf[BossBarPacketBuilder[P with NoFields]]
  }

  def withHealth(health: Float): BossBarPacketBuilder[P with Health] = {
    this.health = health
    this.asInstanceOf[BossBarPacketBuilder[P with Health]]
  }

  def withTitle(title: String): BossBarPacketBuilder[P with Title] = {
    this.title = title
    this.asInstanceOf[BossBarPacketBuilder[P with Title]]
  }

  def withColor(color: Int): BossBarPacketBuilder[P with Color] = {
    this.color = color
    this.asInstanceOf[BossBarPacketBuilder[P with Color]]
  }

  def withDividers(dividers: Int): BossBarPacketBuilder[P with Dividers] = {
    this.dividers = dividers
    this.asInstanceOf[BossBarPacketBuilder[P with Dividers]]
  }

  def withFlags(flags: Int): BossBarPacketBuilder[P with Flags] = {
    this.flags = flags
    this.asInstanceOf[BossBarPacketBuilder[P with Flags]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new BossBarPacket(uuid, action, title, health, color, division, flags, noFields, health, title, color, dividers, flags)
  }
}
object BossBarPacketBuilder {
  sealed trait Uuid
  sealed trait Action
  sealed trait Title
  sealed trait Health
  sealed trait Color
  sealed trait Division
  sealed trait Flags
  sealed trait NoFields
  sealed trait Health
  sealed trait Title
  sealed trait Color
  sealed trait Dividers
  sealed trait Flags
  type Complete = BossBarPacket with Uuid with Action with Title with Health with Color with Division with Flags with NoFields with Health with Title with Color with Dividers with Flags
}
