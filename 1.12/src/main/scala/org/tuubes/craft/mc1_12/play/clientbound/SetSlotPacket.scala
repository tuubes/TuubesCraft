package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.core.network._
import SetSlotPacketBuilder._
import org.tuubes.craft.CraftAttach

/** Packet class auto-generated by DataTractor */
final class SetSlotPacket(var windowId: Byte, var slot: Short, var slotData: AnyRef) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putByte(windowId)
    out.putShort(slot)
    // TODO write slotData
  }
	
  override def obj = SetSlotPacket

	
}
object SetSlotPacket extends PacketObj[CraftAttach, SetSlotPacket] {
  override val id = 22
	
  override def read(in: NiolInput): SetSlotPacket = {
    val windowId = in.getByte()
    val slot = in.getShort()
    // TODO read slotData
    new SetSlotPacket(windowId, slot, slotData)
  }
}
/** Packet builder auto-generated by DataTractor */
final class SetSlotPacketBuilder[P <: SetSlotPacket] extends PacketBuilder[SetSlotPacket, P =:= Complete] {
  private[this] var windowId: Byte = _
  private[this] var slot: Short = _
  private[this] var slotData: AnyRef = _

  def withWindowId(windowId: Byte): SetSlotPacketBuilder[P with WindowId] = {
    this.windowId = windowId
    this.asInstanceOf[SetSlotPacketBuilder[P with WindowId]]
  }

  def withSlot(slot: Short): SetSlotPacketBuilder[P with Slot] = {
    this.slot = slot
    this.asInstanceOf[SetSlotPacketBuilder[P with Slot]]
  }

  def withSlotData(slotData: AnyRef): SetSlotPacketBuilder[P with SlotData] = {
    this.slotData = slotData
    this.asInstanceOf[SetSlotPacketBuilder[P with SlotData]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new SetSlotPacket(windowId, slot, slotData)
  }
}
object SetSlotPacketBuilder {
  sealed trait WindowId
  sealed trait Slot
  sealed trait SlotData
  type Complete = SetSlotPacket with WindowId with Slot with SlotData
}
