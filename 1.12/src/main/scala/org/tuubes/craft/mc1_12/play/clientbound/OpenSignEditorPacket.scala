package org.tuubes.craft.mc1_12.play.clientbound

import com.electronwill.utils.Vec3i
import OpenSignEditorPacketBuilder._
import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.core.network._
import org.tuubes.craft.CraftAttach

/** Packet class auto-generated by DataTractor */
final class OpenSignEditorPacket(var location: Long) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putLong(location)
  }
	
  override def obj = OpenSignEditorPacket

  def vecLocation: Vec3i = {
    val x = location >> 38
    val y = (location >> 26) & 0xfff
    val z = location << 38 >> 38
    new Vec3i(x.toInt, y.toInt, z.toInt)
  }	
}
object OpenSignEditorPacket extends PacketObj[CraftAttach, OpenSignEditorPacket] {
  override val id = 42
	
  override def read(in: NiolInput): OpenSignEditorPacket = {
    val location = in.getLong()
    new OpenSignEditorPacket(location)
  }
}
/** Packet builder auto-generated by DataTractor */
final class OpenSignEditorPacketBuilder[P <: OpenSignEditorPacket] extends PacketBuilder[OpenSignEditorPacket, P =:= Complete] {
  private[this] var location: Long = _

  def withLocation(location: Long): OpenSignEditorPacketBuilder[P with Location] = {
    this.location = location
    this.asInstanceOf[OpenSignEditorPacketBuilder[P with Location]]
  }

  def withLocation(v: Vec3i): OpenSignEditorPacketBuilder[P with Location] = {
    this.location = ((v.x & 0x3ffffff) << 38) | ((v.y & 0xfff) << 26) | (v.z & 0x3ffffff)
    this.asInstanceOf[OpenSignEditorPacketBuilder[P with Location]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new OpenSignEditorPacket(location)
  }
}
object OpenSignEditorPacketBuilder {
  sealed trait Location
  type Complete = OpenSignEditorPacket with Location
}
