package org.tuubes.craft.mc1_12.play.clientbound

import MultiBlockChangePacketBuilder._
import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.craft.CraftAttach
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class MultiBlockChangePacket(var chunkX: Int, var chunkZ: Int, var recordCount: Int, var horizontalPosition: Int, var yCoordinate: Int, var blockId: Int) extends Packet[CraftAttach] {
  override def write(out: NiolOutput): Unit = {
    out.putInt(chunkX)
    out.putInt(chunkZ)
    out.putVarint(recordCount)
    out.putInt(horizontalPosition)
    out.putInt(yCoordinate)
    out.putVarint(blockId)
  }
	
  override def obj = MultiBlockChangePacket

	
}
object MultiBlockChangePacket extends PacketObj[CraftAttach, MultiBlockChangePacket] {
  override val id = 16
	
  override def read(in: NiolInput): MultiBlockChangePacket = {
    val chunkX = in.getInt()
    val chunkZ = in.getInt()
    val recordCount = in.getVarint()
    val horizontalPosition = in.getUnsignedByte()
    val yCoordinate = in.getUnsignedByte()
    val blockId = in.getVarint()
    new MultiBlockChangePacket(chunkX, chunkZ, recordCount, horizontalPosition, yCoordinate, blockId)
  }
}
/** Packet builder auto-generated by DataTractor */
final class MultiBlockChangePacketBuilder[P <: MultiBlockChangePacket] extends PacketBuilder[MultiBlockChangePacket, P =:= Complete] {
  private[this] var chunkX: Int = _
  private[this] var chunkZ: Int = _
  private[this] var recordCount: Int = _
  private[this] var horizontalPosition: Int = _
  private[this] var yCoordinate: Int = _
  private[this] var blockId: Int = _

  def withChunkX(chunkX: Int): MultiBlockChangePacketBuilder[P with ChunkX] = {
    this.chunkX = chunkX
    this.asInstanceOf[MultiBlockChangePacketBuilder[P with ChunkX]]
  }

  def withChunkZ(chunkZ: Int): MultiBlockChangePacketBuilder[P with ChunkZ] = {
    this.chunkZ = chunkZ
    this.asInstanceOf[MultiBlockChangePacketBuilder[P with ChunkZ]]
  }

  def withRecordCount(recordCount: Int): MultiBlockChangePacketBuilder[P with RecordCount] = {
    this.recordCount = recordCount
    this.asInstanceOf[MultiBlockChangePacketBuilder[P with RecordCount]]
  }

  def withHorizontalPosition(horizontalPosition: Int): MultiBlockChangePacketBuilder[P with HorizontalPosition] = {
    this.horizontalPosition = horizontalPosition
    this.asInstanceOf[MultiBlockChangePacketBuilder[P with HorizontalPosition]]
  }

  def withYCoordinate(yCoordinate: Int): MultiBlockChangePacketBuilder[P with YCoordinate] = {
    this.yCoordinate = yCoordinate
    this.asInstanceOf[MultiBlockChangePacketBuilder[P with YCoordinate]]
  }

  def withBlockId(blockId: Int): MultiBlockChangePacketBuilder[P with BlockId] = {
    this.blockId = blockId
    this.asInstanceOf[MultiBlockChangePacketBuilder[P with BlockId]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new MultiBlockChangePacket(chunkX, chunkZ, recordCount, horizontalPosition, yCoordinate, blockId)
  }
}
object MultiBlockChangePacketBuilder {
  sealed trait ChunkX
  sealed trait ChunkZ
  sealed trait RecordCount
  sealed trait HorizontalPosition
  sealed trait YCoordinate
  sealed trait BlockId
  type Complete = MultiBlockChangePacket with ChunkX with ChunkZ with RecordCount with HorizontalPosition with YCoordinate with BlockId
}
