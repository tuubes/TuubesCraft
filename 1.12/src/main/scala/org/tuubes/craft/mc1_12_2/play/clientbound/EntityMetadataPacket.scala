package org.tuubes.craft.mc1_12_2.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.craft.CraftAttach
import org.tuubes.core.network._
import EntityMetadataPacketBuilder._

/** Packet class auto-generated by DataTractor */
final class EntityMetadataPacket(var entityId: Int, var metadata: AnyRef) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(entityId)
    // TODO write metadata
  }
	
  override def id = EntityMetadataPacket.id

	
}
object EntityMetadataPacket extends PacketObj[CraftAttach, EntityMetadataPacket] {
  override val id = 60
	
  override def read(in: NiolInput): EntityMetadataPacket = {
    val entityId = in.getVarint()
    // TODO read metadata
    new EntityMetadataPacket(entityId, null)
  }
}
/** Packet builder auto-generated by DataTractor */
final class EntityMetadataPacketBuilder[P <: EntityMetadataPacket] extends PacketBuilder[EntityMetadataPacket, P =:= Complete] {
  private[this] var entityId: Int = _
  private[this] var metadata: AnyRef = _

  def withEntityId(entityId: Int): EntityMetadataPacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[EntityMetadataPacketBuilder[P with EntityId]]
  }

  def withMetadata(metadata: AnyRef): EntityMetadataPacketBuilder[P with Metadata] = {
    this.metadata = metadata
    this.asInstanceOf[EntityMetadataPacketBuilder[P with Metadata]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new EntityMetadataPacket(entityId, metadata)
  }
}
object EntityMetadataPacketBuilder {
  sealed trait EntityId
  sealed trait Metadata
  type Complete = EntityMetadataPacket with EntityId with Metadata
}
