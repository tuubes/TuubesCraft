package org.tuubes.craft.mc1_12_2.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import UpdateHealthPacketBuilder._
import org.tuubes.craft.CraftAttach
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class UpdateHealthPacket(var health: Float, var food: Int, var foodSaturation: Float) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putFloat(health)
    out.putVarint(food)
    out.putFloat(foodSaturation)
  }
	
  override def id = UpdateHealthPacket.id

	
}
object UpdateHealthPacket extends PacketObj[CraftAttach, UpdateHealthPacket] {
  override val id = 65
	
  override def read(in: NiolInput): UpdateHealthPacket = {
    val health = in.getFloat()
    val food = in.getVarint()
    val foodSaturation = in.getFloat()
    new UpdateHealthPacket(health, food, foodSaturation)
  }
}
/** Packet builder auto-generated by DataTractor */
final class UpdateHealthPacketBuilder[P <: UpdateHealthPacket] extends PacketBuilder[UpdateHealthPacket, P =:= Complete] {
  private[this] var health: Float = _
  private[this] var food: Int = _
  private[this] var foodSaturation: Float = _

  def withHealth(health: Float): UpdateHealthPacketBuilder[P with Health] = {
    this.health = health
    this.asInstanceOf[UpdateHealthPacketBuilder[P with Health]]
  }

  def withFood(food: Int): UpdateHealthPacketBuilder[P with Food] = {
    this.food = food
    this.asInstanceOf[UpdateHealthPacketBuilder[P with Food]]
  }

  def withFoodSaturation(foodSaturation: Float): UpdateHealthPacketBuilder[P with FoodSaturation] = {
    this.foodSaturation = foodSaturation
    this.asInstanceOf[UpdateHealthPacketBuilder[P with FoodSaturation]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new UpdateHealthPacket(health, food, foodSaturation)
  }
}
object UpdateHealthPacketBuilder {
  sealed trait Health
  sealed trait Food
  sealed trait FoodSaturation
  type Complete = UpdateHealthPacket with Health with Food with FoodSaturation
}
