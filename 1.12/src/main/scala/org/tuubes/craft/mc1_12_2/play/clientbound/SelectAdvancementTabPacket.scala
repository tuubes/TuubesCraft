package org.tuubes.craft.mc1_12_2.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import SelectAdvancementTabPacketBuilder._
import java.nio.charset.StandardCharsets.UTF_8
import org.tuubes.craft.CraftAttach
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class SelectAdvancementTabPacket(var hasId: Boolean, var optionalIdentifier: String) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putBool(hasId)
    out.putVarstring(optionalIdentifier, UTF_8)
  }
	
  override def id = SelectAdvancementTabPacket.id

	
}
object SelectAdvancementTabPacket extends PacketObj[CraftAttach, SelectAdvancementTabPacket] {
  override val id = 55
	
  override def read(in: NiolInput): SelectAdvancementTabPacket = {
    val hasId = in.getBool()
    val optionalIdentifier = in.getVarstring(UTF_8)
    new SelectAdvancementTabPacket(hasId, optionalIdentifier)
  }
}
/** Packet builder auto-generated by DataTractor */
final class SelectAdvancementTabPacketBuilder[P <: SelectAdvancementTabPacket] extends PacketBuilder[SelectAdvancementTabPacket, P =:= Complete] {
  private[this] var hasId: Boolean = _
  private[this] var optionalIdentifier: String = _

  def withHasId(hasId: Boolean): SelectAdvancementTabPacketBuilder[P with HasId] = {
    this.hasId = hasId
    this.asInstanceOf[SelectAdvancementTabPacketBuilder[P with HasId]]
  }

  def withOptionalIdentifier(optionalIdentifier: String): SelectAdvancementTabPacketBuilder[P with OptionalIdentifier] = {
    this.optionalIdentifier = optionalIdentifier
    this.asInstanceOf[SelectAdvancementTabPacketBuilder[P with OptionalIdentifier]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new SelectAdvancementTabPacket(hasId, optionalIdentifier)
  }
}
object SelectAdvancementTabPacketBuilder {
  sealed trait HasId
  sealed trait OptionalIdentifier
  type Complete = SelectAdvancementTabPacket with HasId with OptionalIdentifier
}
