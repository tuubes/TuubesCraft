package org.tuubes.craft.mc1_12_2.play.clientbound

import AnimationPacketBuilder._
import com.electronwill.niol.{NiolInput, NiolOutput}
import org.tuubes.craft.CraftAttach
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class AnimationPacket(var entityId: Int, var animation: Int) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putVarint(entityId)
    out.putInt(animation)
  }
	
  override def id = AnimationPacket.id

	
}
object AnimationPacket extends PacketObj[CraftAttach, AnimationPacket] {
  override val id = 6
	
  override def read(in: NiolInput): AnimationPacket = {
    val entityId = in.getVarint()
    val animation = in.getUnsignedByte()
    new AnimationPacket(entityId, animation)
  }
}
/** Packet builder auto-generated by DataTractor */
final class AnimationPacketBuilder[P <: AnimationPacket] extends PacketBuilder[AnimationPacket, P =:= Complete] {
  private[this] var entityId: Int = _
  private[this] var animation: Int = _

  def withEntityId(entityId: Int): AnimationPacketBuilder[P with EntityId] = {
    this.entityId = entityId
    this.asInstanceOf[AnimationPacketBuilder[P with EntityId]]
  }

  def withAnimation(animation: Int): AnimationPacketBuilder[P with Animation] = {
    this.animation = animation
    this.asInstanceOf[AnimationPacketBuilder[P with Animation]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new AnimationPacket(entityId, animation)
  }
}
object AnimationPacketBuilder {
  sealed trait EntityId
  sealed trait Animation
  type Complete = AnimationPacket with EntityId with Animation
}
