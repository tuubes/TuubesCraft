package org.tuubes.craft.mc1_12_2.play.serverbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import PlayerPositionAndLookPacketBuilder._
import org.tuubes.craft.CraftAttach
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class PlayerPositionAndLookPacket(var x: Double, var feetY: Double, var z: Double, var yaw: Float, var pitch: Float, var onGround: Boolean) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putDouble(x)
    out.putDouble(feetY)
    out.putDouble(z)
    out.putFloat(yaw)
    out.putFloat(pitch)
    out.putBool(onGround)
  }
	
  override def id = PlayerPositionAndLookPacket.id

	
}
object PlayerPositionAndLookPacket extends PacketObj[CraftAttach, PlayerPositionAndLookPacket] {
  override val id = 14
	
  override def read(in: NiolInput): PlayerPositionAndLookPacket = {
    val x = in.getDouble()
    val feetY = in.getDouble()
    val z = in.getDouble()
    val yaw = in.getFloat()
    val pitch = in.getFloat()
    val onGround = in.getBool()
    new PlayerPositionAndLookPacket(x, feetY, z, yaw, pitch, onGround)
  }
}
/** Packet builder auto-generated by DataTractor */
final class PlayerPositionAndLookPacketBuilder[P <: PlayerPositionAndLookPacket] extends PacketBuilder[PlayerPositionAndLookPacket, P =:= Complete] {
  private[this] var x: Double = _
  private[this] var feetY: Double = _
  private[this] var z: Double = _
  private[this] var yaw: Float = _
  private[this] var pitch: Float = _
  private[this] var onGround: Boolean = _

  def withX(x: Double): PlayerPositionAndLookPacketBuilder[P with X] = {
    this.x = x
    this.asInstanceOf[PlayerPositionAndLookPacketBuilder[P with X]]
  }

  def withFeetY(feetY: Double): PlayerPositionAndLookPacketBuilder[P with FeetY] = {
    this.feetY = feetY
    this.asInstanceOf[PlayerPositionAndLookPacketBuilder[P with FeetY]]
  }

  def withZ(z: Double): PlayerPositionAndLookPacketBuilder[P with Z] = {
    this.z = z
    this.asInstanceOf[PlayerPositionAndLookPacketBuilder[P with Z]]
  }

  def withYaw(yaw: Float): PlayerPositionAndLookPacketBuilder[P with Yaw] = {
    this.yaw = yaw
    this.asInstanceOf[PlayerPositionAndLookPacketBuilder[P with Yaw]]
  }

  def withPitch(pitch: Float): PlayerPositionAndLookPacketBuilder[P with Pitch] = {
    this.pitch = pitch
    this.asInstanceOf[PlayerPositionAndLookPacketBuilder[P with Pitch]]
  }

  def withOnGround(onGround: Boolean): PlayerPositionAndLookPacketBuilder[P with OnGround] = {
    this.onGround = onGround
    this.asInstanceOf[PlayerPositionAndLookPacketBuilder[P with OnGround]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new PlayerPositionAndLookPacket(x, feetY, z, yaw, pitch, onGround)
  }
}
object PlayerPositionAndLookPacketBuilder {
  sealed trait X
  sealed trait FeetY
  sealed trait Z
  sealed trait Yaw
  sealed trait Pitch
  sealed trait OnGround
  type Complete = PlayerPositionAndLookPacket with X with FeetY with Z with Yaw with Pitch with OnGround
}
