package org.tuubes.craft.mc1_12_2.play.clientbound

import com.electronwill.niol.{NiolInput, NiolOutput}
import PlayerPositionAndLookPacketBuilder._
import org.tuubes.craft.CraftAttach
import org.tuubes.core.network._

/** Packet class auto-generated by DataTractor */
final class PlayerPositionAndLookPacket(var x: Double, var y: Double, var z: Double, var yaw: Float, var pitch: Float, var flags: Byte, var teleportId: Int) extends Packet {
  override def write(out: NiolOutput): Unit = {
    out.putDouble(x)
    out.putDouble(y)
    out.putDouble(z)
    out.putFloat(yaw)
    out.putFloat(pitch)
    out.putByte(flags)
    out.putVarint(teleportId)
  }
	
  override def id = PlayerPositionAndLookPacket.id

	
}
object PlayerPositionAndLookPacket extends PacketObj[CraftAttach, PlayerPositionAndLookPacket] {
  override val id = 47
	
  override def read(in: NiolInput): PlayerPositionAndLookPacket = {
    val x = in.getDouble()
    val y = in.getDouble()
    val z = in.getDouble()
    val yaw = in.getFloat()
    val pitch = in.getFloat()
    val flags = in.getByte()
    val teleportId = in.getVarint()
    new PlayerPositionAndLookPacket(x, y, z, yaw, pitch, flags, teleportId)
  }
}
/** Packet builder auto-generated by DataTractor */
final class PlayerPositionAndLookPacketBuilder[P <: PlayerPositionAndLookPacket] extends PacketBuilder[PlayerPositionAndLookPacket, P =:= Complete] {
  private[this] var x: Double = _
  private[this] var y: Double = _
  private[this] var z: Double = _
  private[this] var yaw: Float = _
  private[this] var pitch: Float = _
  private[this] var flags: Byte = _
  private[this] var teleportId: Int = _

  def withX(x: Double): PlayerPositionAndLookPacketBuilder[P with X] = {
    this.x = x
    this.asInstanceOf[PlayerPositionAndLookPacketBuilder[P with X]]
  }

  def withY(y: Double): PlayerPositionAndLookPacketBuilder[P with Y] = {
    this.y = y
    this.asInstanceOf[PlayerPositionAndLookPacketBuilder[P with Y]]
  }

  def withZ(z: Double): PlayerPositionAndLookPacketBuilder[P with Z] = {
    this.z = z
    this.asInstanceOf[PlayerPositionAndLookPacketBuilder[P with Z]]
  }

  def withYaw(yaw: Float): PlayerPositionAndLookPacketBuilder[P with Yaw] = {
    this.yaw = yaw
    this.asInstanceOf[PlayerPositionAndLookPacketBuilder[P with Yaw]]
  }

  def withPitch(pitch: Float): PlayerPositionAndLookPacketBuilder[P with Pitch] = {
    this.pitch = pitch
    this.asInstanceOf[PlayerPositionAndLookPacketBuilder[P with Pitch]]
  }

  def withFlags(flags: Byte): PlayerPositionAndLookPacketBuilder[P with Flags] = {
    this.flags = flags
    this.asInstanceOf[PlayerPositionAndLookPacketBuilder[P with Flags]]
  }

  def withTeleportId(teleportId: Int): PlayerPositionAndLookPacketBuilder[P with TeleportId] = {
    this.teleportId = teleportId
    this.asInstanceOf[PlayerPositionAndLookPacketBuilder[P with TeleportId]]
  }

  override def build()(implicit evidence: P =:= Complete) = {
    new PlayerPositionAndLookPacket(x, y, z, yaw, pitch, flags, teleportId)
  }
}
object PlayerPositionAndLookPacketBuilder {
  sealed trait X
  sealed trait Y
  sealed trait Z
  sealed trait Yaw
  sealed trait Pitch
  sealed trait Flags
  sealed trait TeleportId
  type Complete = PlayerPositionAndLookPacket with X with Y with Z with Yaw with Pitch with Flags with TeleportId
}
